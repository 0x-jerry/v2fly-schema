{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": {},
    "definitions": {
        "AccountObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"user\": \"my-username\",\n  \"pass\": \"my-password\"\n}\n```",
            "properties": {
                "pass": {
                    "description": "密码，字符串类型。必填。\n:::tip\n在 Linux 中使用以下环境变量即可在当前 session 使用全局 HTTP 代理（很多软件都支持这一设置，也有不支持的）。\n`export http_proxy=http://127.0.0.1:8080/` (地址须改成你配置的 HTTP 入站代理地址)\n`export https_proxy=$http_proxy`\n:::",
                    "type": "string"
                },
                "user": {
                    "description": "用户名，字符串类型。必填。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AccountObject_1": {
            "additionalProperties": {},
            "description": "```javascript\n{\n  \"user\": \"my-username\",\n  \"pass\": \"my-password\"\n}\n```",
            "properties": {
                "pass": {
                    "description": "密码",
                    "type": "string"
                },
                "user": {
                    "description": "用户名",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AllocateObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"strategy\": \"always\",\n  \"refresh\": 5,\n  \"concurrency\": 3\n}\n```",
            "properties": {
                "concurrency": {
                    "description": "随机端口数量。最小值为 `1`，最大值为 `port` 范围的三分之一。建议值为 `3`。",
                    "type": "number"
                },
                "refresh": {
                    "description": "随机端口刷新间隔，单位为分钟。最小值为 `2`，建议值为 `5`。这个属性仅当 `strategy = random` 时有效。",
                    "type": "number"
                },
                "strategy": {
                    "description": "端口分配策略。`\"always\"` 表示总是分配所有已指定的端口，`port` 中指定了多少个端口，V2Ray 就会监听这些端口。`\"random\"` 表示随机开放端口，每隔 `refresh` 分钟在 `port` 范围中随机选取 `concurrency` 个端口来监听。",
                    "enum": [
                        "always",
                        "random"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ApiObject": {
            "additionalProperties": {},
            "description": "`ApiObject` 对应配置文件的 `api` 项。\n```json\n{\n  \"tag\": \"api\",\n  \"services\": [\n      \"HandlerService\",\n      \"LoggerService\",\n      \"StatsService\"\n  ]\n}\n```",
            "properties": {
                "services": {
                    "description": "开启的 API 列表，可选的值见 [API 列表](#支持的-api-列表)。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tag": {
                    "description": "出站代理标识。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BalancerObject": {
            "additionalProperties": {},
            "description": "负载均衡器配置。当一个负载均衡器生效时，它会从指定的出站协议中，按配置选出一个最合适的出站协议，进行流量转发。\n```json\n{\n  \"tag\": \"balancer\",\n  \"selector\": [],\n  \"strategy\": {\n    \"type\": \"random\"\n  }\n}\n```",
            "properties": {
                "selector": {
                    "description": "一个字符串数组，其中每一个字符串将用于和出站协议标识的前缀匹配。在以下几个出站协议标识中：`[ \"a\", \"ab\", \"c\", \"ba\" ]`，`\"selector\": [\"a\"]` 将匹配到 `[ \"a\", \"ab\" ]`。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "strategy": {
                    "$ref": "#/definitions/StrategyObject",
                    "description": "进行负载均衡的策略对象。"
                },
                "tag": {
                    "description": "此负载均衡器的标识，用于匹配 `RuleObject` 中的 `balancerTag`。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BridgeObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"tag\": \"bridge\",\n  \"domain\": \"test.v2fly.org\"\n}\n```",
            "properties": {
                "domain": {
                    "description": "一个域名。`bridge` 向 `portal` 建立的连接，都会使用这个域名进行发送。这个域名只作为 `bridge` 和 `portal` 的通信用途，不必真实存在。",
                    "type": "string"
                },
                "tag": {
                    "description": "一个标识，所有由 `bridge` 发出的连接，都会带有这个标识。可以在 [路由](routing.md) 中使用 `inboundTag` 进行识别。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BrowserForwarderObject": {
            "additionalProperties": {},
            "description": "`BrowserForwarderObject` 对应配置文件的 `browserForwarder` 项。 (4.37.0+)\n```json\n{\n  \"listenAddr\": \"127.0.0.1\",\n  \"listenPort\": 8080\n}\n```",
            "properties": {
                "listenAddr": {
                    "description": "浏览器转发页面的本地监听地址。",
                    "type": "string"
                },
                "listenPort": {
                    "description": "浏览器转发页面的本地监听端口。\n浏览器转发程序利用浏览器的内构功能转发连接到对应的服务器，避免 V2Ray 直接建立到远程的 TLS 连接，减少了可供识别的特征。\n在使用时，需要打开浏览器访问相应的网页服务器以便使用转发功能。\n应该在资源文件夹放置转发页面和脚本的文件夹，这个内容必须随 V2Ray 本体同时更新，且和发布的内容一致。V2Ray 不会向浏览器发送无法识别的转发页面和脚本。\n此资源数据在二进制分发版本中位于可选的 extra 包 (v2ray-extra.zip) 中。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "CertificateObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"usage\": \"encipherment\",\n  \"certificateFile\": \"/path/to/certificate.crt\",\n  \"keyFile\": \"/path/to/key.key\",\n  \"certificate\": [\n      \"-----BEGIN CERTIFICATE-----\",\n      \"MIICwDCCAaigAwIBAgIRAO16JMdESAuHidFYJAR/7kAwDQYJKoZIhvcNAQELBQAw\",\n      \"ADAeFw0xODA0MTAxMzU1MTdaFw0xODA0MTAxNTU1MTdaMAAwggEiMA0GCSqGSIb3\",\n      \"DQEBAQUAA4IBDwAwggEKAoIBAQCs2PX0fFSCjOemmdm9UbOvcLctF94Ox4BpSfJ+\",\n      \"3lJHwZbvnOFuo56WhQJWrclKoImp/c9veL1J4Bbtam3sW3APkZVEK9UxRQ57HQuw\",\n      \"OzhV0FD20/0YELou85TwnkTw5l9GVCXT02NG+pGlYsFrxesUHpojdl8tIcn113M5\",\n      \"pypgDPVmPeeORRf7nseMC6GhvXYM4txJPyenohwegl8DZ6OE5FkSVR5wFQtAhbON\",\n      \"OAkIVVmw002K2J6pitPuJGOka9PxcCVWhko/W+JCGapcC7O74palwBUuXE1iH+Jp\",\n      \"noPjGp4qE2ognW3WH/sgQ+rvo20eXb9Um1steaYY8xlxgBsXAgMBAAGjNTAzMA4G\",\n      \"A1UdDwEB/wQEAwIFoDATBgNVHSUEDDAKBggrBgEFBQcDATAMBgNVHRMBAf8EAjAA\",\n      \"MA0GCSqGSIb3DQEBCwUAA4IBAQBUd9sGKYemzwPnxtw/vzkV8Q32NILEMlPVqeJU\",\n      \"7UxVgIODBV6A1b3tOUoktuhmgSSaQxjhYbFAVTD+LUglMUCxNbj56luBRlLLQWo+\",\n      \"9BUhC/ow393tLmqKcB59qNcwbZER6XT5POYwcaKM75QVqhCJVHJNb1zSEE7Co7iO\",\n      \"6wIan3lFyjBfYlBEz5vyRWQNIwKfdh5cK1yAu13xGENwmtlSTHiwbjBLXfk+0A/8\",\n      \"r/2s+sCYUkGZHhj8xY7bJ1zg0FRalP5LrqY+r6BckT1QPDIQKYy615j1LpOtwZe/\",\n      \"d4q7MD/dkzRDsch7t2cIjM/PYeMuzh87admSyL6hdtK0Nm/Q\",\n      \"-----END CERTIFICATE-----\"\n  ],\n  \"key\": [\n      \"-----BEGIN RSA PRIVATE KEY-----\",\n      \"MIIEowIBAAKCAQEArNj19HxUgoznppnZvVGzr3C3LRfeDseAaUnyft5SR8GW75zh\",\n      \"bqOeloUCVq3JSqCJqf3Pb3i9SeAW7Wpt7FtwD5GVRCvVMUUOex0LsDs4VdBQ9tP9\",\n      \"GBC6LvOU8J5E8OZfRlQl09NjRvqRpWLBa8XrFB6aI3ZfLSHJ9ddzOacqYAz1Zj3n\",\n      \"jkUX+57HjAuhob12DOLcST8np6IcHoJfA2ejhORZElUecBULQIWzjTgJCFVZsNNN\",\n      \"itieqYrT7iRjpGvT8XAlVoZKP1viQhmqXAuzu+KWpcAVLlxNYh/iaZ6D4xqeKhNq\",\n      \"IJ1t1h/7IEPq76NtHl2/VJtbLXmmGPMZcYAbFwIDAQABAoIBAFCgG4phfGIxK9Uw\",\n      \"qrp+o9xQLYGhQnmOYb27OpwnRCYojSlT+mvLcqwvevnHsr9WxyA+PkZ3AYS2PLue\",\n      \"C4xW0pzQgdn8wENtPOX8lHkuBocw1rNsCwDwvIguIuliSjI8o3CAy+xVDFgNhWap\",\n      \"/CMzfQYziB7GlnrM6hH838iiy0dlv4I/HKk+3/YlSYQEvnFokTf7HxbDDmznkJTM\",\n      \"aPKZ5qbnV+4AcQfcLYJ8QE0ViJ8dVZ7RLwIf7+SG0b0bqloti4+oQXqGtiESUwEW\",\n      \"/Wzi7oyCbFJoPsFWp1P5+wD7jAGpAd9lPIwPahdr1wl6VwIx9W0XYjoZn71AEaw4\",\n      \"bK4xUXECgYEA3g2o9WqyrhYSax3pGEdvV2qN0VQhw7Xe+jyy98CELOO2DNbB9QNJ\",\n      \"8cSSU/PjkxQlgbOJc8DEprdMldN5xI/srlsbQWCj72wXxXnVnh991bI2clwt7oYi\",\n      \"pcGZwzCrJyFL+QaZmYzLxkxYl1tCiiuqLm+EkjxCWKTX/kKEFb6rtnMCgYEAx0WR\",\n      \"L8Uue3lXxhXRdBS5QRTBNklkSxtU+2yyXRpvFa7Qam+GghJs5RKfJ9lTvjfM/PxG\",\n      \"3vhuBliWQOKQbm1ZGLbgGBM505EOP7DikUmH/kzKxIeRo4l64mioKdDwK/4CZtS7\",\n      \"az0Lq3eS6bq11qL4mEdE6Gn/Y+sqB83GHZYju80CgYABFm4KbbBcW+1RKv9WSBtK\",\n      \"gVIagV/89moWLa/uuLmtApyEqZSfn5mAHqdc0+f8c2/Pl9KHh50u99zfKv8AsHfH\",\n      \"TtjuVAvZg10GcZdTQ/I41ruficYL0gpfZ3haVWWxNl+J47di4iapXPxeGWtVA+u8\",\n      \"eH1cvgDRMFWCgE7nUFzE8wKBgGndUomfZtdgGrp4ouLZk6W4ogD2MpsYNSixkXyW\",\n      \"64cIbV7uSvZVVZbJMtaXxb6bpIKOgBQ6xTEH5SMpenPAEgJoPVts816rhHdfwK5Q\",\n      \"8zetklegckYAZtFbqmM0xjOI6bu5rqwFLWr1xo33jF0wDYPQ8RHMJkruB1FIB8V2\",\n      \"GxvNAoGBAM4g2z8NTPMqX+8IBGkGgqmcYuRQxd3cs7LOSEjF9hPy1it2ZFe/yUKq\",\n      \"ePa2E8osffK5LBkFzhyQb0WrGC9ijM9E6rv10gyuNjlwXdFJcdqVamxwPUBtxRJR\",\n      \"cYTY2HRkJXDdtT0Bkc3josE6UUDvwMpO0CfAETQPto1tjNEDhQhT\",\n      \"-----END RSA PRIVATE KEY-----\"\n  ]\n}\n```",
            "properties": {
                "certificate": {
                    "description": "一个字符串数组，表示证书内容，格式如样例所示。`certificate` 和 `certificateFile` 二者选一。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "certificateFile": {
                    "description": "证书文件路径，如使用 OpenSSL 生成，后缀名为 .crt。\n:::tip\n使用 `v2ctl cert -ca` 可以生成自签名的 CA 证书。\n:::",
                    "type": "string"
                },
                "key": {
                    "description": "一个字符串数组，表示密钥内容，格式如样例如示。`key` 和 `keyFile` 二者选一。\n当 `certificateFile` 和 `certificate` 同时指定时，V2Ray 优先使用 `certificateFile`。`keyFile` 和 `key` 也一样。\n:::tip\n当 `usage` 为 `\"verify\"` 时，`keyFile` 和 `key` 可均为空。\n:::",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "keyFile": {
                    "description": "密钥文件路径，如使用 OpenSSL 生成，后缀名为 .key。目前暂不支持需要密码的 key 文件。",
                    "type": "string"
                },
                "usage": {
                    "description": "证书用途，默认值为 `\"encipherment\"`。\n`\"encipherment\"`：证书用于 TLS 认证和加密。\n`\"verify\"`：证书用于验证远端 TLS 的证书。当使用此项时，当前证书必须为 CA 证书。\n`\"issue\"`：证书用于签发其它证书。当使用此项时，当前证书必须为 CA 证书。\n`\"verifyclient\"`：用于验证客户端身份的证书颁发机构证书。当使用此项时，当前证书必须为 CA 证书。 (4.42.0+)\n:::tip\n在 Windows 平台上可以将自签名的 CA 证书安装到系统中，即可验证远端 TLS 的证书。\n:::\n:::tip\n当有新的客户端请求时，假设所指定的 `serverName` 为 `\"v2ray.com\"`，V2Ray 会先从证书列表中寻找可用于 `\"v2ray.com\"` 的证书，如果没有找到，则使用任一 `usage` 为 `\"issue\"` 的证书签发一个适用于 `\"v2ray.com\"` 的证书，有效期为一小时。并将新的证书加入证书列表，以供后续使用。\n:::",
                    "enum": [
                        "encipherment",
                        "issue",
                        "verify",
                        "verifyclient"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"password\": \"password\",\n  \"email\": \"love@v2fly.org\",\n  \"level\": 0,\n}\n```",
            "properties": {
                "email": {
                    "description": "邮件地址，可选，用于标识用户",
                    "type": "string"
                },
                "level": {
                    "description": "用户等级，默认值为 `0`。详见 [本地策略](../policy.md)。",
                    "type": "number"
                },
                "password": {
                    "description": "必填，任意字符串。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientObject_1": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"id\": \"27848739-7e62-4138-9fd3-098a63964b6b\",\n  \"level\": 0,\n  \"email\": \"love@v2fly.org\"\n}\n```",
            "properties": {
                "email": {
                    "description": "用户邮箱，用于区分不同用户的流量（日志、统计）。",
                    "type": "string"
                },
                "id": {
                    "description": "VLESS 的用户 ID，必须是一个合法的 UUID，你也可以用 [V2Ctl](../../guide/command.md#v2ctl) 生成它。",
                    "type": "string"
                },
                "level": {
                    "description": "用户等级，详见 [本地策略](../policy.md)。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ClientObject_2": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"id\": \"27848739-7e62-4138-9fd3-098a63964b6b\",\n  \"level\": 0,\n  \"alterId\": 4,\n  \"email\": \"love@v2ray.com\"\n}\n```",
            "properties": {
                "alterId": {
                    "description": "与上文出站协议中的含义相同。",
                    "type": "number"
                },
                "email": {
                    "description": "用户邮箱地址，用于区分不同用户的流量。",
                    "type": "string"
                },
                "id": {
                    "description": "VMess 的用户 ID。必须是一个合法的 UUID。",
                    "type": "string"
                },
                "level": {
                    "description": "用户等级，详见[本地策略](../policy.md)",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "DefaultObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"level\": 0,\n  \"alterId\": 0\n}\n```",
            "properties": {
                "alterId": {
                    "description": "动态端口的默认`alterId`，默认值为`0`。\n为了进一步对抗可能的探测和封锁，自 v4.24 版本起，每个 VMess 认证数据的服务器端结构都会包含一个一次写入的玷污状态标记，初始状态为无瑕状态，当服务器检测到重放探测时或者因为其他原因入站连接出错以致校验数据不正确时，该连接所对应的请求认证数据会被玷污。\n被玷污的认证数据无法被用于建立连接，当攻击者或客户端使用被玷污的认证数据建立连接时，服务器会输出包含 \"invalid user\" \"ErrTainted\" 的错误信息，并阻止该连接。\n当服务器没有受到重放攻击时，该机制对正常连接的客户端没有影响。如果服务器正在被重放攻击，可能会出现连接不稳定的情况。\n拥有服务器 UUID 以及其他连接数据的恶意程序可能根据此机制对服务器发起拒绝服务攻击，受到此类攻击的服务可以通过修改 proxy/vmess/validator.go 文件中 func (v *TimedUserValidator) BurnTaintFuse(userHash []byte) error 函数的 atomic.CompareAndSwapUint32(pair.taintedFuse, 0, 1) 语句为 atomic.CompareAndSwapUint32(pair.taintedFuse, 0, 0) 来解除服务器对此类攻击的安全保护机制。使用 VMessAEAD 认证机制的客户端不受到 VMess MD5 认证信息 玷污机制 的影响。\nVMessAEAD 协议已经经过同行评议并已经整合了相应的修改。 VMess MD5 认证信息 的淘汰机制已经启动。\n自 2022 年 1 月 1 日起，服务器端将默认禁用对于 MD5 认证信息 的兼容。任何使用 MD5 认证信息的客户端将无法连接到禁用 VMess MD5 认证信息的服务器端。\n在服务器端可以通过设置环境变量 `v2ray.vmess.aead.forced` = `true` 以关闭对于 MD5 认证信息的兼容。\n或者 `v2ray.vmess.aead.forced` = `false` 以强制开启对于 MD5 认证信息 认证机制的兼容 （不受到 2022 年自动禁用机制的影响） 。 (v4.35.0+)",
                    "type": "number"
                },
                "level": {
                    "description": "用户等级，意义同上。默认值为`0`。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "DetourObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"to\": \"tag_to_detour\"\n}\n```",
            "properties": {
                "to": {
                    "description": "一个入站协议的`tag`，详见 [InboundObject](../inbounds.md#inboundobject) 。指定的入站协议必须是一个 VMess",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DnsObject": {
            "additionalProperties": {},
            "description": "`DnsObject` 对应配置文件的 `dns` 项。\n```json\n{\n  \"hosts\": {\n      \"baidu.com\": \"127.0.0.1\",\n      \"example.com\": [\n          \"127.0.0.1\",\n          \"::1\",\n          \"proxy.example.com\",\n          \"127.0.0.2\"\n      ],\n      \"dns.google\": \"8.8.8.8\",\n      \"proxy.example.com\": \"127.0.0.1\",\n      \"geosite:test\": [\n          \"another-proxy.example.com\",\n          \"127.0.0.1\"\n      ],\n      \"geosite:category-ads-all\": [\n          \"127.0.0.1\",\n          \"127.0.0.2\",\n          \"::1\"\n      ]\n  },\n  \"servers\": [\n      \"https://dns.google/dns-query\",\n      {\n          \"address\": \"223.5.5.5\",\n          \"port\": 5353,\n          \"clientIp\": \"5.6.7.8\",\n          \"skipFallback\": true,\n          \"domains\": [\n              \"domain:baidu.com\",\n              \"geosite:cn\"\n          ],\n          \"expectIPs\": [\n              \"geoip:cn\",\n              \"ext:customizedGeoIPFile.dat:cn\",\n              \"ext-ip:customizedGeoIPFile.dat:cn\"\n          ]\n      },\n      {\n          \"address\": \"fakedns\",\n          \"domains\": [\n              \"domain:v2fly.org\",\n              \"geosite:geolocation-!cn\"\n          ]\n      },\n      {\n          \"address\": \"https://1.1.1.1/dns-query\",\n          \"domains\": [\n              \"domain:v2fly.org\",\n              \"geosite:geolocation-!cn\"\n          ],\n          \"expectIPs\": [\n              \"geoip:!cn\",\n              \"ext:customizedGeoIPFile.dat:!cn\",\n              \"ext-ip:customizedGeoIPFile.dat:!cn\"\n          ]\n      },\n      \"1.0.0.1\",\n      \"localhost\"\n  ],\n  \"clientIp\": \"1.2.3.4\",\n  \"queryStrategy\": \"UseIPv4\",\n  \"disableCache\": true,\n  \"disableFallback\": true,\n  \"tag\": \"dns_inbound\"\n}\n```",
            "properties": {
                "clientIp": {
                    "description": "当前网络的 IP 地址。用于 DNS 查询时通知 DNS 服务器，客户端所在的地理位置（不能是私有 IP 地址）。\n:::tip\n此功能需要 DNS 服务器支持 EDNS Client Subnet（RFC7871）。\n:::",
                    "type": "string"
                },
                "disableCache": {
                    "description": "(4.35.0+) 禁用 DNS 缓存。默认为 false，即为不禁用。",
                    "type": "boolean"
                },
                "disableFallback": {
                    "description": "(4.37.2+) 禁用 DNS 回退（fallback）查询。默认为 false，即为不禁用。详情见 [DNS 处理流程](#dns-处理流程)。\n:::warning\n如果本选项设置为 `true`，则 [ServerObject](#serverobject) 中的 `skipFallback` 均不会生效。\n:::",
                    "type": "boolean"
                },
                "disableFallbackIfMatch": {
                    "description": "(4.40.2+)   禁用在 DNS 服务器的优先匹配域名列表命中时执行 DNS 回退（fallback）查询。",
                    "type": "boolean"
                },
                "hosts": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Record<string,string>"
                        },
                        {
                            "$ref": "#/definitions/Record<string,string[]>"
                        }
                    ],
                    "description": "域名与地址的映射，其值可为「域名与单个地址」的映射、「域名与多个地址（地址数组）的映射」(v4.37.3+)，其中地址可以是 IP 或域名。\n在解析域名时，如果域名匹配这个列表中的某一项，当该项的地址为 IP 时，则解析结果为该项的 IP，而不会进行后续的 DNS 解析；当该项的地址为域名时，会使用此域名进行后续的 DNS 解析，而不使用原始域名。\n:::tip\n当地址中同时设置了多个 IP 和域名，则只会返回第一个域名，其余 IP 和域名均被忽略。\n:::\n域名的格式有以下几种形式：\n- **纯字符串**：当此域名完整匹配目标域名时，该规则生效。例如 `v2ray.com` 匹配 `v2ray.com` 但不匹配 `www.v2ray.com`。\n- **正则表达式**：由 `regexp:` 开始，余下部分是一个正则表达式。当此正则表达式匹配目标域名时，该规则生效。例如 `regexp:\\.goo.*\\.com$` 匹配 `www.google.com`、`fonts.googleapis.com`，但不匹配 `google.com`。\n- **子域名 (推荐)**：由 `domain:` 开始，余下部分是一个域名。当此域名是目标域名或其子域名时，该规则生效。例如 `domain:v2ray.com` 匹配 `www.v2ray.com`、`v2ray.com`，但不匹配 `xv2ray.com`。\n- **子串**：由 `keyword:` 开始，余下部分是一个字符串。当此字符串匹配目标域名中任意部分，该规则生效。比如 `keyword:sina.com` 可以匹配 `sina.com`、`sina.com.cn`、`www.sina.com` 和 `www.sina.company`，但不匹配 `sina.cn`。\n- **预定义域名列表**：由 `geosite:` 开头，余下部分是一个名称，如 `geosite:google` 或者 `geosite:cn`。名称及域名列表参考 [预定义域名列表](routing.md#预定义域名列表)。"
                },
                "queryStrategy": {
                    "description": "(4.37.0+) DNS 查询所使用的网络类型。默认值为 `UseIP`，即 DNS 同时查询域名的 A 和 AAAA 记录。`UseIPv4` 和 `UseIPv6` 分别为只查询 A 记录、只查询 AAAA 记录。\n:::tip\n建议没有 IPv6 网络的用户，设置为 `UseIPv4`。本选项与 `freedom` 协议 `outbound` 中的 `domainStrategy` 选项优先级相同，建议同时设置为 `UseIPv4`。\n:::\n:::warning\n如果本选项设置为 `UseIPv4`，而 `freedom` 协议 `outbound` 中的 `domainStrategy` 选项设置为 `UseIPv6`，会导致从 `freedom` 协议 `outbound` 发出的连接的 DNS 查询被 Go 运行时接管，进而导致 DNS 泄漏；反之同理。\n:::",
                    "enum": [
                        "UseIP",
                        "UseIPv4",
                        "UseIPv6"
                    ],
                    "type": "string"
                },
                "servers": {
                    "description": "DNS 服务器列表，有效的写法有两种：DNS 地址（字符串形式）和 [ServerObject](#serverobject) 。\n详情查看[支持的 DNS 协议及其路由策略](#支持的-dns-协议及其路由策略)",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/ServerObject"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "tag": {
                    "description": "（V2Ray 4.13+）由此 DNS 发出的查询流量，除 `localhost` 和 `DOHL_` 模式外，都会带有此标识，可在路由使用 `inboundTag` 进行匹配。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DomainSocketObject": {
            "additionalProperties": {},
            "description": "`DomainSocketObject` 对应传输配置的 `dsSettings` 项。\n```json\n{\n  \"path\": \"/path/to/ds/file\",\n  \"abstract\": false,\n  \"padding\": false\n}\n```",
            "properties": {
                "abstract": {
                    "description": "是否为 abstract domain socket，默认 `false`。",
                    "type": "boolean"
                },
                "padding": {
                    "description": "v4.28.1+，abstract domain socket 是否带 padding，默认 `false`。",
                    "type": "boolean"
                },
                "path": {
                    "description": "一个合法的文件路径。在运行 V2Ray 之前，这个文件必须不存在。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FakeDnsObject": {
            "additionalProperties": {},
            "description": "`FakeDnsObject` 对应配置文件的 `fakedns` 项。(4.38.1+)\n```json\n[\n  {\n      \"ipPool\": \"198.18.0.0/15\",\n      \"poolSize\": 65535\n  },\n  {\n      \"ipPool\": \"fc00::/18\",\n      \"poolSize\": 65535\n  }\n]\n```",
            "properties": {
                "ipPool": {
                    "description": "FakeDNS 分配 IP 的地址空间。由 FakeDNS 分配的地址会符合这个 CIDR 表达式。"
                },
                "poolSize": {
                    "description": "FakeDNS 所记忆的「IP - 域名映射」数量。当域名数量超过此数值时，会依据 [LRU](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)) 规则淘汰老旧域名。\n:::warning\npoolSize 必须小于或等于 ipPool 的地址总数，否则将无法启动。\n:::\n:::tip\n自 v4.38.1 起，若配置文件中的 `dns` 项显式设置了 `fakedns`，而配置文件中没有显式设置 `fakedns` 项，V2Ray 会根据 DNS 组件中 `queryStrategy` 项的值来初始化 `fakedns` 项的配置，即 FakeDNS 是否支持对不同类型 DNS 查询（A 记录和 AAAA 记录）返回相应的 IPv4 或 IPv6 类型的 IP 地址。\n`queryStrategy` 为 `UseIPv4` 时，默认的 `ipPool` 为 `198.18.0.0/15`、`poolSize` 为 `65535`。\n`queryStrategy` 为 `UseIPv6` 时，默认的 `ipPool` 为 `fc00::/18`，`poolSize` 为 `65535`。\n`queryStrategy` 为 `UseIP` 时，默认用于 IPv4 的 `ipPool` 为 `198.18.0.0/15`、`poolSize` 为 `32768`；用于 IPv6 的 `ipPool` 为 `fc00::/18`、`poolSize` 为 `32768`。\n:::\nFakeDNS，有时也叫 Fake IP，是解决 DNS 污染、防止 DNS 泄露、减低延时的技术手段（[RFC3089](https://tools.ietf.org/html/rfc3089)）。对于透明代理和三层代理（例如 Android VPNService）而言，在数据发送之前，被代理的程序需要先发出 DNS 请求，以获取目标主机/域名的 IP 地址。\n:::warning\nFakeDNS 尽管有很多优点，但是会污染本地程序的 DNS 缓存，当代理断开之后的一段时间内设备可能无法访问网络。\n:::\n```json\n{\n\"dns\": {\n\"servers\": [\n    \"fakedns\", // fakedns 排在首位\n    \"8.8.8.8\"\n]\n},\n\"outbounds\": [\n{\n    \"protocol\": \"dns\",\n    \"tag\": \"dns-out\"\n}\n],\n\"routing\": {\n\"rules\": [\n    {\n        \"type\": \"field\",\n        \"inboundTag\": [\n            \"tproxy-in\" // 只劫持来自透明代理入站的 DNS 流量。\n        ],\n        \"port\": 53,\n        \"outboundTag\": \"dns-out\"\n    }\n]\n}\n}\n```\n当外部 DNS 请求进入 FakeDNS 组件时，它会返回位于自己 `ipPool` 内的 IP 地址作为域名的虚构解析结果，并记录该域名与虚构解析结果之间的映射关系。\n```json\n{\n\"inbounds\": [\n{\n    \"listen\": \"::\",\n    \"port\": 3346,\n    \"protocol\": \"dokodemo-door\", // 流量入口，可以是其他协议\n    \"sniffing\": {\n        \"enabled\": true,\n        \"destOverride\": [\n            \"fakedns\",       // 二选一\n            \"fakedns+others\" // 二选一\n        ],\n        \"metadataOnly\": false\n    },\n    \"settings\": {\n        \"network\": \"tcp,udp\",\n        \"followRedirect\": true\n    },\n    \"streamSettings\": {\n        \"sockopt\": {\n            \"tproxy\": \"tproxy\"\n        }\n    },\n    \"tag\": \"tproxy-in\"\n}\n]\n}\n```\n上面给出了一个透明代理入站使用 FakeDNS 的例子。你也可以将其他入站协议配合 FakeDNS 使用。\n当客户端程序基于之前解析结果请求连接这个 IP 所指向的主机时，对应 [入站连接](inbounds.md) 的 `fakedns` 流量侦测模块会将目标地址还原为对应的域名。\n:::tip\n如果在使用 FakeDNS 时遇到了直连空解析的问题，可以尝试在 `freedom` 出站设置 `domainStrategy` 为 `UseIP`、`UseIPv4` 或 `UseIPv6`。\n:::\n当使用 DNS 分流时，为了让 `fakedns` 拥有高优先级，需要增加与其他类型 DNS 相同的 `domains` 配置。\n```json\n{\n\"servers\": [\n{\n    \"address\": \"fakedns\",\n    \"domains\": [\n        \"geosite:cn\"\n    ]\n},\n{\n    \"address\": \"223.5.5.5\",\n    \"domains\": [\n        \"geosite:cn\"\n    ],\n    \"expectIPs\": [\n        \"geoip:cn\"\n    ]\n},\n\"8.8.8.8\"\n]\n}\n```\n若希望某些域名不使用 FakeDNS，则可在其他类型的 DNS 中增加 `domains` 配置，使其在匹配该域名时，拥有比 FakeDNS 更高的优先级，从而实现 FakeDNS 的黑名单机制。\n```json\n{\n\"servers\": [\n\"fakedns\",\n{\n    \"address\": \"223.5.5.5\",\n    \"domains\": [\n        \"domain:not-use-fakedns.com\",\n        \"geosite:cn\"\n    ]\n},\n\"8.8.8.8\"\n]\n}\n```\n若只希望某些域名使用 FakeDNS，则可在 FakeDNS 中增加 `domains` 配置，使 FakeDNS 在匹配该域名时，拥有比其他类型的 DNS 更高的优先级，从而实现 FakeDNS 的白名单机制。\n```json\n{\n\"servers\": [\n\"8.8.8.8\",\n{\n    \"address\": \"fakedns\",\n    \"domains\": [\n        \"domain:use-fakedns.com\",\n        \"geosite:geolocation-!cn\"\n    ]\n}\n]\n}\n```",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "FallbackObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"alpn\": \"\",\n  \"path\": \"\",\n  \"dest\": 80,\n  \"xver\": 0\n}\n```\nv4.31.0+，V2Ray 的 Trojan 有完整的 VLESS fallbacks 支持，配置方式完全一致，后续 VLESS fallbacks 升级时会同步跟进。\n触发回落的条件也基本相同：首包长度 < 58 或第 57 个字节不为 '\\r'（因为 Trojan 没有协议版本）或身份认证失败。",
            "type": "object"
        },
        "FallbackObject_1": {
            "additionalProperties": {},
            "description": "协议回落\n```json\n{\n  \"alpn\": \"\",\n  \"path\": \"\",\n  \"dest\": 80,\n  \"xver\": 0\n}\n```\n*`fallbacks` 是一个数组（v4.27.2+），这里是其中一个子元素的配置说明，参数不同于以前的 fallback 项。**\n`fallbacks` 项是可选的，只能用于 TCP+TLS 传输组合\n- 该项有子元素时，[Inbound TLS](../../config/transport.md#tlsobject) 需设置 `\"alpn\":[\"http/1.1\"]`。**\n通常，你需要先设置一组 `alpn` 和 `path` 均省略或为空的默认回落，然后再按需配置其它分流。\nVLESS 会把 TLS 解密后首包长度 < 18 或协议版本无效、身份认证失败的流量转发到 `dest` 指定的地址。\n其它传输组合必须删掉 `fallbacks` 项或所有子元素，此时也不会开启 Fallback，VLESS 会等待读够所需长度，协议版本无效或身份认证失败时，将直接断开连接。",
            "properties": {
                "alpn": {
                    "description": "尝试匹配 TLS ALPN 协商结果，空为任意，默认为 \"\"\n有需要时，VLESS 才会尝试读取 TLS ALPN 协商结果，若成功，输出 info `realAlpn =` 到日志。\n用途：解决了 Nginx 的 h2c 服务不能同时兼容 http/1.1 的问题，Nginx 需要写两行 listen，分别用于 1.1 和 h2c。\n注意：fallbacks alpn 存在 `\"h2\"` 时，[Inbound TLS](../../config/transport.md#tlsobject) 需设置 `\"alpn\":[\"h2\",\"http/1.1\"]`，以支持 h2 访问。\n:::tip\nFallback 内设置的 \"alpn\" 是匹配实际协商出的 ALPN，而 Inbound TLS 设置的 \"alpn\" 是握手时可选的 ALPN 列表，两者含义不同。\n:::",
                    "type": "string"
                },
                "dest": {
                    "description": "决定 TLS 解密后 TCP 流量的去向，目前支持两类地址：（该项必填，否则无法启动）\n1. TCP，格式为 `\"addr:port\"`，其中 addr 支持 IPv4、域名、IPv6，若填写域名，也将直接发起 TCP 连接（而不走内置的 DNS）。\n2. Unix domain socket，格式为绝对路径，形如 `\"/dev/shm/domain.socket\"`，可在开头加 `\"@\"` 代表 [abstract](https://www.man7.org/linux/man-pages/man7/unix.7.html)，`\"@@\"` 则代表带 padding 的 abstract。\n若只填 port，数字或字符串均可，形如 `80`、`\"80\"`，通常指向一个明文 http 服务（addr 会被补为 `\"127.0.0.1\"`）。",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "path": {
                    "description": "尝试匹配首包 HTTP PATH，空为任意，默认为空，非空则必须以 `\"/\"` 开头，不支持 h2c。\n智能：有需要时，VLESS 才会尝试看一眼 PATH（不超过 55 个字节；最快算法，并不完整解析 HTTP），若成功，输出 info `realPath =` 到日志。\n用途：分流其它 inbound 的 WebSocket 流量或 HTTP 伪装流量，没有多余处理、纯粹转发流量，[实测比 Nginx 反代更强](https://github.com/badO1a5A90/v2ray-doc/blob/master/v2ray%20speed%20test%20v4.27.2.md)。\n注意：**fallbacks 所在入站本身必须是 TCP+TLS**，这是分流至其它 WS 入站用的，被分流的入站则无需配置 TLS。",
                    "type": "string"
                },
                "xver": {
                    "description": "发送 [PROXY protocol](https://www.haproxy.org/download/2.2/doc/proxy-protocol.txt)，专用于传递请求的真实来源 IP 和端口，填版本 1 或 2，默认为 0，即不发送。若有需要建议填 1。\n目前填 1 或 2，功能完全相同，只是结构不同，且前者可打印，后者为二进制。V2Ray 的 TCP 和 WS 入站均已支持接收 PROXY protocol。\n:::tip\n若你正在 [配置 Nginx 接收 PROXY protocol](https://docs.nginx.com/nginx/admin-guide/load-balancer/using-proxy-protocol/#configuring-nginx-to-accept-the-proxy-protocol)，除了设置 proxy_protocol 外，还需设置 set_real_ip_from，否则可能会出问题。\n:::\n*补充说明**\n1. 将匹配到最精确的子元素，与子元素的排列顺序无关。若配置了几个 alpn 和 path 均相同的子元素，则会以最后的为准。\n2. 回落分流均是解密后 TCP 层的转发，而不是 HTTP 层，只在必要时检查首包 PATH。\n3. 不支持按域名分流。若有此需求，建议前置 Nginx 等并配置 stream SNI 分流。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "HTTPRequestObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"version\": \"1.1\",\n  \"method\": \"GET\",\n  \"path\": [\n      \"/\"\n  ],\n  \"headers\": {\n      \"Host\": [\n          \"www.baidu.com\",\n          \"www.bing.com\"\n      ],\n      \"User-Agent\": [\n          \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\",\n          \"Mozilla/5.0 (iPhone; CPU iPhone OS 10_0_2 like Mac OS X) AppleWebKit/601.1 (KHTML, like Gecko) CriOS/53.0.2785.109 Mobile/14A456 Safari/601.1.46\"\n      ],\n      \"Accept-Encoding\": [\n          \"gzip, deflate\"\n      ],\n      \"Connection\": [\n          \"keep-alive\"\n      ],\n      \"Pragma\": \"no-cache\"\n  }\n}\n```",
            "properties": {
                "headers": {
                    "$ref": "#/definitions/Record<string,string[]>",
                    "description": "HTTP 头，一个键值对，每个键表示一个 HTTP 头的名称，对应的值是一个数组。每次请求会附上所有的键，并随机选择一个对应的值。默认值见上方示例。"
                },
                "method": {
                    "description": "HTTP 方法，默认值为 `\"GET\"`。",
                    "type": "string"
                },
                "path": {
                    "description": "路径，一个字符串数组。默认值为 `[\"/\"]`。当有多个值时，每次请求随机选择一个值。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "version": {
                    "description": "HTTP 版本，默认值为 `\"1.1\"`。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HTTPResponseObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"version\": \"1.1\",\n  \"status\": \"200\",\n  \"reason\": \"OK\",\n  \"headers\": {\n      \"Content-Type\": [\n          \"application/octet-stream\",\n          \"video/mpeg\"\n      ],\n      \"Transfer-Encoding\": [\n          \"chunked\"\n      ],\n      \"Connection\": [\n          \"keep-alive\"\n      ],\n      \"Pragma\": \"no-cache\"\n  }\n}\n```",
            "properties": {
                "headers": {
                    "$ref": "#/definitions/Record<string,string[]>",
                    "description": "HTTP 头，一个键值对，每个键表示一个 HTTP 头的名称，对应的值是一个数组。每次请求会附上所有的键，并随机选择一个对应的值。默认值见上方示例。"
                },
                "reason": {
                    "description": "HTTP 状态说明，默认值为 `\"OK\"`。",
                    "type": "string"
                },
                "status": {
                    "description": "HTTP 状态，默认值为 `\"200\"`。",
                    "type": "string"
                },
                "version": {
                    "description": "HTTP 版本，默认值为 `\"1.1\"`。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HeaderObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"type\": \"none\"\n}\n```",
            "properties": {
                "type": {
                    "description": "伪装类型，可选的值有：\n`\"none\"`：默认值，不进行伪装，发送的数据是没有特征的数据包。\n`\"srtp\"`：伪装成 SRTP 数据包，会被识别为视频通话数据（如 FaceTime）。\n`\"utp\"`：伪装成 uTP 数据包，会被识别为 BT 下载数据。\n`\"wechat-video\"`：伪装成微信视频通话的数据包。\n`\"dtls\"`：伪装成 DTLS 1.2 数据包。\n`\"wireguard\"`：伪装成 WireGuard 数据包。（并不是真正的 WireGuard 协议）\n[@skywind3000](https://github.com/skywind3000) 发明并实现了 KCP 协议。\n[@xtaci](https://github.com/xtaci) 将 KCP 由 C 语言实现翻译成 Go。\n[@xiaokangwang](https://github.com/xiaokangwang) 测试 KCP 与 V2Ray 的整合并提交了最初的 PR。\n原生 KCP 协议使用了 24 字节的固定头部，而 mKCP 修改为数据包 18 字节，确认（ACK）包 16 字节。更小的头部有助于躲避特征检查，并加快传输速度。\n另外，原生 KCP 的单个确认包只能确认一个数据包已收到，也就是说当 KCP 需要确认 100 个数据已收到时，它会发出 24 \\* 100 = 2400 字节的数据。其中包含了大量重复的头部数据，造成带宽的浪费。mKCP 会对多个确认包进行压缩，100 个确认包只需要 16 + 2 + 100 \\* 4 = 418 字节，相当于原生的六分之一。\n原生 KCP 协议的确认（ACK）包只发送一次，如果确认包丢失，则一定会导致数据重传，造成不必要的带宽浪费。而 mKCP 会以一定的频率重发确认包，直到发送方确认为止。单个确认包的大小为 22 字节，相比起数据包的 1000 字节以上，重传确认包的代价要小得多。\nmKCP 可以有效地开启和关闭连接。当远程主机主动关闭连接时，连接会在两秒钟之内释放；当远程主机断线时，连接会在最多 30 秒内释放。\n原生 KCP 不支持这个场景。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HeaderObject_1": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"type\": \"none\"\n}\n```",
            "properties": {
                "type": {
                    "description": "伪装类型，可选的值有：\n`\"none\"`：默认值，不进行伪装。\n`\"srtp\"`：伪装成 SRTP 数据包，会被识别为视频通话数据（如 FaceTime）。\n`\"utp\"`：伪装成 uTP 数据包，会被识别为 BT 下载数据。\n`\"wechat-video\"`：伪装成微信视频通话的数据包。\n`\"dtls\"`：伪装成 DTLS 1.2 数据包。\n`\"wireguard\"`：伪装成 WireGuard 数据包。（并不是真正的 WireGuard 协议）\n:::tip\n当加密和伪装都不启用时，数据包即为原始的 QUIC 数据包，可以与其它的 QUIC 工具对接。为了避免被探测，建议加密或伪装至少开启一项。\n:::",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HttpHeaderObject": {
            "additionalProperties": {},
            "description": "HTTP 伪装配置必须在对应的入站出站连接上同时配置，且内容必须一致。\n```json\n{\n  \"type\": \"http\",\n  \"request\": {},\n  \"response\": {}\n}\n```",
            "properties": {
                "request": {
                    "$ref": "#/definitions/HTTPRequestObject",
                    "description": "HTTP 请求"
                },
                "response": {
                    "$ref": "#/definitions/HTTPResponseObject",
                    "description": "HTTP 响应"
                },
                "type": {
                    "description": "指定进行 HTTP 伪装",
                    "enum": [
                        "http"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HttpObject": {
            "additionalProperties": {},
            "description": "`HttpObject` 对应传输配置的 `httpSettings` 项。\n```json\n{\n  \"host\": [\n      \"v2ray.com\"\n  ],\n  \"path\": \"/random/path\",\n  \"method\":\"PUT\",\n  \"headers\": {\n  }\n}\n```",
            "properties": {
                "headers": {
                    "$ref": "#/definitions/Record<string,string[]>",
                    "description": "HTTP 头，一个键值对，每个键表示一个 HTTP 头的名称，对应的值是一个数组。(v4.39.0+)"
                },
                "host": {
                    "description": "一个字符串数组，每一个元素是一个域名。客户端会随机从列表中选出一个域名进行通信，服务器会验证域名是否在列表中。\nHTTP 路径，由 `/` 开头。客户端和服务器必须一致。可选参数，默认值为 `\"/\"`。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "method": {
                    "description": "HTTP 方法，默认值为 `\"PUT\"`。 (v4.39.0+)",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "InboundConfigurationObject": {
            "anyOf": [
                {
                    "$ref": "#/definitions/t<InboundConfigurationObject,\"dokodemo-door\">"
                },
                {
                    "$ref": "#/definitions/t<InboundConfigurationObject,\"http\">"
                },
                {
                    "$ref": "#/definitions/t<InboundConfigurationObject,\"shadowsocks\">"
                },
                {
                    "$ref": "#/definitions/t<InboundConfigurationObject,\"socks\">"
                },
                {
                    "$ref": "#/definitions/t<InboundConfigurationObject,\"trojan\">"
                },
                {
                    "$ref": "#/definitions/t<InboundConfigurationObject,\"vless\">"
                },
                {
                    "$ref": "#/definitions/t<InboundConfigurationObject,\"vmess\">"
                }
            ]
        },
        "InboundConfigurationObject_1": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"address\": \"8.8.8.8\",\n  \"port\": 53,\n  \"network\": \"tcp\",\n  \"timeout\": 0,\n  \"followRedirect\": false,\n  \"userLevel\": 0\n}\n```",
            "properties": {
                "address": {
                    "description": "将流量转发到此地址。可以是一个 IP 地址，形如 `\"1.2.3.4\"`，或者一个域名，形如 `\"v2ray.com\"`。字符串类型。\n当 `followRedirect`（见下文）为 `true` 时，`address` 可为空。",
                    "type": "string"
                },
                "followRedirect": {
                    "description": "当值为 `true` 时，dokodemo-door 会识别出由 iptables 转发而来的数据，并转发到相应的目标地址。详见 [传输配置](../transport.md) 中的 `tproxy` 设置。",
                    "type": "boolean"
                },
                "network": {
                    "description": "可接收的网络协议类型。比如当指定为 `\"tcp\"` 时，任意门仅会接收 TCP 流量。默认值为 `\"tcp\"`。",
                    "enum": [
                        "tcp",
                        "tcp,udp",
                        "udp"
                    ],
                    "type": "string"
                },
                "port": {
                    "description": "将流量转发到目标地址的指定端口，范围 \\[1, 65535\\]，数值类型。必填参数。",
                    "type": "number"
                },
                "timeout": {
                    "description": "入站数据的时间限制（秒），默认值为 300。\nV2Ray 3.1 后等价于对应用户等级的 `connIdle` 策略",
                    "type": "number"
                },
                "userLevel": {
                    "description": "用户等级，所有连接都会使用这个用户等级。\nV2Ray 中增加一个 dokodemo-door 的入站协议：\n```json\n{\n\"network\": \"tcp,udp\",\n\"timeout\": 30,\n\"followRedirect\": true\n}\n```\n配置 iptables：\n```bash\n# Create new chain\niptables -t nat -N V2RAY\niptables -t mangle -N V2RAY\niptables -t mangle -N V2RAY_MARK\n\n# Ignore your V2Ray server's addresses\n# It's very IMPORTANT, just be careful.\niptables -t nat -A V2RAY -d 123.123.123.123 -j RETURN\n\n# Ignore LANs and any other addresses you'd like to bypass the proxy\n# See Wikipedia and RFC5735 for full list of reserved networks.\niptables -t nat -A V2RAY -d 0.0.0.0/8 -j RETURN\niptables -t nat -A V2RAY -d 10.0.0.0/8 -j RETURN\niptables -t nat -A V2RAY -d 127.0.0.0/8 -j RETURN\niptables -t nat -A V2RAY -d 169.254.0.0/16 -j RETURN\niptables -t nat -A V2RAY -d 172.16.0.0/12 -j RETURN\niptables -t nat -A V2RAY -d 192.168.0.0/16 -j RETURN\niptables -t nat -A V2RAY -d 224.0.0.0/4 -j RETURN\niptables -t nat -A V2RAY -d 240.0.0.0/4 -j RETURN\n\n# Anything else should be redirected to Dokodemo-door's local port\niptables -t nat -A V2RAY -p tcp -j REDIRECT --to-ports 12345\n\n# Add any UDP rules\nip route add local default dev lo table 100\nip rule add fwmark 1 lookup 100\niptables -t mangle -A V2RAY -p udp --dport 53 -j TPROXY --on-port 12345 --tproxy-mark 0x01/0x01\niptables -t mangle -A V2RAY_MARK -p udp --dport 53 -j MARK --set-mark 1\n\n# Apply the rules\niptables -t nat -A OUTPUT -p tcp -j V2RAY\niptables -t mangle -A PREROUTING -j V2RAY\niptables -t mangle -A OUTPUT -j V2RAY_MARK\n```",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "InboundConfigurationObject_2": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"timeout\": 0,\n  \"accounts\": [\n      {\n          \"user\": \"my-username\",\n          \"pass\": \"my-password\"\n      }\n  ],\n  \"allowTransparent\": false,\n  \"userLevel\": 0\n}\n```\n:::tip\n应该注意，虽然 `http inbound` 可以提供公共服务，但 http 协议没有对传输加密，不适宜经公网中传输，更容易成为被人用作攻击的肉鸡。`http inbound` 更有意义的用法是在局域网或本机环境下监听，为其他程序提供本地服务。\n:::",
            "properties": {
                "accounts": {
                    "description": "一个数组，数组中每个元素为一个用户帐号。默认值为空。\n当 `accounts` 非空时，HTTP 代理将对入站连接进行 Basic Authentication 验证。",
                    "items": {
                        "$ref": "#/definitions/AccountObject"
                    },
                    "type": "array"
                },
                "allowTransparent": {
                    "description": "当为 `true` 时，会转发所有 HTTP 请求，而非只是代理请求。若配置不当，开启此选项会导致死循环。",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "从客户端读取数据的超时设置（秒），0 表示不限时。默认值为 300。 V2Ray 3.1 后等价于对应用户等级的 `connIdle` 策略。",
                    "type": "number"
                },
                "userLevel": {
                    "description": "用户等级，所有连接使用这一等级。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "InboundConfigurationObject_3": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"email\": \"love@v2ray.com\",\n  \"method\": \"aes-256-gcm\",\n  \"password\": \"密码\",\n  \"level\": 0,\n  \"network\": \"tcp\",\n  \"ivCheck\": false\n}\n```",
            "properties": {
                "email": {
                    "description": "邮件地址，可选，用于标识用户",
                    "type": "string"
                },
                "ivCheck": {
                    "description": "是否启用 IV 检查功能。可以使某些 IV 重放攻击更加困难。 (4.37.0+)\n目前此功能默认不启用，但是在未来版本中会默认处于启用状态。",
                    "type": "boolean"
                },
                "level": {
                    "description": "用户等级，默认值为 `0`。详见 [本地策略](../policy.md)。",
                    "type": "number"
                },
                "method": {
                    "description": "必填。可选的值见 [加密方式列表](#加密方式列表)",
                    "type": "string"
                },
                "network": {
                    "description": "可接收的网络连接类型，默认值为 `\"tcp\"`。",
                    "enum": [
                        "tcp",
                        "tcp,udp",
                        "udp"
                    ],
                    "type": "string"
                },
                "password": {
                    "description": "必填，任意字符串。Shadowsocks 协议不限制密码长度，但短密码会更可能被破解，建议使用 16 字符或更长的密码。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "InboundConfigurationObject_4": {
            "additionalProperties": {},
            "description": "应该注意，虽然 socks inbound 可以公共服务端口，但 socks 协议没有对传输加密，不适宜经公网中传输。socks inbound 更有意义的用法是在局域网或本机环境下，为其他程序提供本地服务。\n```json\n{\n  \"auth\": \"noauth\",\n  \"accounts\": [\n      {\n          \"user\": \"my-username\",\n          \"pass\": \"my-password\"\n      }\n  ],\n  \"udp\": false,\n  \"ip\": \"127.0.0.1\",\n  \"userLevel\": 0\n}\n```",
            "properties": {
                "accounts": {
                    "description": "一个数组，数组中每个元素为一个用户帐号。默认值为空。此选项仅当 `auth` 为 `password` 时有效。",
                    "items": {
                        "$ref": "#/definitions/AccountObject_1"
                    },
                    "type": "array"
                },
                "auth": {
                    "description": "Socks 协议的认证方式，支持 `\"noauth\"` 匿名方式和 `\"password\"` 用户密码方式。默认值为 `\"noauth\"`。",
                    "enum": [
                        "noauth",
                        "password"
                    ],
                    "type": "string"
                },
                "ip": {
                    "description": "SOCKS5 通过 `UDP ASSOCIATE` 命令建立 UDP 会话。服务端在对客户端发来的该命令的回复中，指定客户端发包的目标地址。\nv4.34.0+: 默认值为空，此时对于通过本地回环 IPv4/IPv6 连接的客户端，回复对应的回环 IPv4/IPv6 地址；对于非本机的客户端，回复当前入站的监听地址。\nv4.33.0 及更早版本: 默认值 `127.0.0.1`。\n你可以通过配置此项使 V2Ray 固定回复你配置的地址。如果你不知道此项的作用，留空即可。",
                    "type": "string"
                },
                "udp": {
                    "description": "是否开启 UDP 协议的支持。默认值为 `false`。",
                    "type": "boolean"
                },
                "userLevel": {
                    "description": "用户等级，所有连接使用这一等级。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "InboundConfigurationObject_5": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"clients\":[\n      {\n          \"password\": \"password\",\n          \"email\": \"love@v2fly.org\",\n          \"level\": 0\n      }\n  ],\n  \"fallbacks\": [\n      {\n          \"dest\": 80\n      }\n  ]\n}\n```",
            "properties": {
                "clients": {
                    "description": "一个数组，其中每一项是一个 [ClientObject](#clientobject)。",
                    "items": {
                        "$ref": "#/definitions/ClientObject"
                    },
                    "type": "array"
                },
                "fallbacks": {
                    "description": "一个数组，包含一系列强大的回落分流配置（可选）。",
                    "items": {
                        "$ref": "#/definitions/FallbackObject"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "InboundConfigurationObject_6": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"clients\": [\n      {\n          \"id\": \"27848739-7e62-4138-9fd3-098a63964b6b\",\n          \"level\": 0,\n          \"email\": \"love@v2fly.org\"\n      }\n  ],\n  \"decryption\": \"none\",\n  \"fallbacks\": [\n      {\n          \"dest\": 80\n      }\n  ]\n}\n```",
            "properties": {
                "clients": {
                    "description": "一组服务端认可的用户。",
                    "items": {
                        "$ref": "#/definitions/ClientObject_1"
                    },
                    "type": "array"
                },
                "decryption": {
                    "description": "注意这里是 decryption，和 clients 同级。现阶段同样需要填 `\"none\"`，不能留空。decryption 和 encryption 的位置不同，是因为若套一层约定加密，服务端需要先解密才能知道是哪个用户。\n若未正确设置 decryption 的值，使用 v2ray 或 -test 时会收到错误信息。",
                    "enum": [
                        "none"
                    ],
                    "type": "string"
                },
                "fallbacks": {
                    "description": "一个数组，包含一系列强大的回落分流配置（可选）。",
                    "items": {
                        "$ref": "#/definitions/FallbackObject_1"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "InboundConfigurationObject_7": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"clients\": [\n      {\n          \"id\": \"27848739-7e62-4138-9fd3-098a63964b6b\",\n          \"level\": 0,\n          \"alterId\": 0,\n          \"email\": \"love@v2ray.com\"\n      }\n  ],\n  \"default\": {\n      \"level\": 0,\n      \"alterId\": 0\n  },\n  \"detour\": {\n      \"to\": \"tag_to_detour\"\n  },\n  \"disableInsecureEncryption\": false\n}\n```",
            "properties": {
                "clients": {
                    "description": "一组服务器认可的用户。clients 可以为空。当此配置用作动态端口时，V2Ray 会自动创建用户。",
                    "items": {
                        "$ref": "#/definitions/ClientObject_2"
                    },
                    "type": "array"
                },
                "default": {
                    "$ref": "#/definitions/DefaultObject",
                    "description": "可选，clients 的默认配置。仅在配合`detour`时有效。"
                },
                "detour": {
                    "$ref": "#/definitions/DetourObject",
                    "description": "指示对应的出站协议使用另一个服务器。"
                },
                "disableInsecureEncryption": {
                    "description": "是否禁止客户端使用不安全的加密方式，当客户端指定下列加密方式时，服务器会主动断开连接。默认值为`false`。\n`\"none\"`\n`\"aes-128-cfb\"`",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "InboundObject": {
            "additionalProperties": {},
            "description": "`InboundObject` 对应配置文件中 `inbounds` 项的一个子元素。\n```json\n{\n  \"listen\": \"127.0.0.1\",\n  \"port\": 1080,\n  \"protocol\": \"协议名称\",\n  \"settings\": {},\n  \"streamSettings\": {},\n  \"tag\": \"标识\",\n  \"sniffing\": {\n      \"enabled\": true,\n      \"destOverride\": [\n          \"http\",\n          \"tls\"\n      ],\n      \"metadataOnly\": false\n  },\n  \"allocate\": {\n      \"strategy\": \"always\",\n      \"refresh\": 5,\n      \"concurrency\": 3\n  }\n}\n```",
            "properties": {
                "allocate": {
                    "$ref": "#/definitions/AllocateObject",
                    "description": "端口分配设置"
                },
                "listen": {
                    "description": "监听地址，只允许 IP 地址，默认值为 `\"0.0.0.0\"`，表示接收所有网卡上的连接。除此之外，必须指定一个现有网卡的地址。\nv4.32.0+，支持填写 Unix domain socket，格式为绝对路径，形如 `\"/dev/shm/domain.socket\"`，可在开头加 `\"@\"` 代表 [abstract](https://www.man7.org/linux/man-pages/man7/unix.7.html)，`\"@@\"` 则代表带 padding 的 abstract。\n填写 Unix domain socket 时，`port` 和 `allocate` 将被忽略，协议暂时可选 VLESS、VMess、Trojan，传输方式可选 TCP、WebSocket、HTTP/2。",
                    "type": "string"
                },
                "port": {
                    "description": "端口。接受的格式如下:\n整型数值：实际的端口号。\n环境变量：以 `\"env:\"` 开头，后面是一个环境变量的名称，如 `\"env:PORT\"`。V2Ray 会以字符串形式解析这个环境变量。\n字符串：可以是一个数值类型的字符串，如 `\"1234\"`；或者一个数值范围，如 `\"5-10\"` 表示端口 5 到端口 10，这 6 个端口。\n当只有一个端口时，V2Ray 会在此端口监听入站连接。当指定了一个端口范围时，取决于 `allocate` 设置。",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "protocol": {
                    "description": "连接协议名称，可选的值见协议列表。",
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/InboundConfigurationObject",
                    "description": "具体的配置内容，视协议不同而不同。详见每个协议中的 `InboundConfigurationObject`。"
                },
                "sniffing": {
                    "$ref": "#/definitions/SniffingObject",
                    "description": "尝试探测流量的类型"
                },
                "streamSettings": {
                    "$ref": "#/definitions/StreamSettingsObject",
                    "description": "[底层传输配置](transport.md#streamsettingsobject)"
                },
                "tag": {
                    "description": "此入站连接的标识，用于在其它的配置中定位此连接。当其不为空时，其值必须在所有 `tag` 中唯一。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "KcpObject": {
            "additionalProperties": {},
            "description": "`KcpObject` 对应传输配置的 `kcpSettings` 项。\n```json\n{\n  \"mtu\": 1350,\n  \"tti\": 20,\n  \"uplinkCapacity\": 5,\n  \"downlinkCapacity\": 20,\n  \"congestion\": false,\n  \"readBufferSize\": 1,\n  \"writeBufferSize\": 1,\n  \"header\": {\n      \"type\": \"none\"\n  },\n  \"seed\": \"Password\"\n}\n```",
            "properties": {
                "congestion": {
                    "description": "是否启用拥塞控制，默认值为 `false`。开启拥塞控制之后，V2Ray 会自动监测网络质量，当丢包严重时，会自动降低吞吐量；当网络畅通时，也会适当增加吞吐量。",
                    "type": "boolean"
                },
                "downlinkCapacity": {
                    "description": "下行链路容量，即主机接收数据所用的最大带宽，单位 MB/s，默认值 `20`。注意是 Byte 而非 bit。可以设置为 `0`，表示一个非常小的带宽。\n:::tip\n`uplinkCapacity` 和 `downlinkCapacity` 决定了 mKCP 的传输速度。以客户端发送数据为例，客户端的 `uplinkCapacity` 指定了发送数据的速度，而服务器端的 `downlinkCapacity` 指定了接收数据的速度。两者的值以较小的一个为准。推荐把 `downlinkCapacity` 设置为一个较大的值，比如 100，而 `uplinkCapacity` 设为实际的网络速度。当速度不够时，可以逐渐增加 `uplinkCapacity` 的值，直到带宽的两倍左右。\n:::",
                    "type": "number"
                },
                "header": {
                    "$ref": "#/definitions/HeaderObject",
                    "description": "数据包头部伪装设置"
                },
                "mtu": {
                    "description": "最大传输单元（maximum transmission unit），请选择一个介于 `576` - `1460` 之间的值。默认值为 `1350`。",
                    "type": "number"
                },
                "readBufferSize": {
                    "description": "单个连接的读取缓冲区大小，单位是 MB。默认值为 `2`。",
                    "type": "number"
                },
                "seed": {
                    "description": "v4.24.2+，可选的混淆密码，使用 AES-128-GCM 算法混淆流量数据，客户端和服务端需要保持一致，启用后会输出\"NewAEADAESGCMBasedOnSeed Used\"到命令行。本混淆机制不能用于保证通信内容的安全，但可能可以对抗部分封锁，在开发者测试环境下开启此设置后没有出现原版未混淆版本的封端口现象。",
                    "type": "string"
                },
                "tti": {
                    "description": "传输时间间隔（transmission time interval），单位毫秒（ms），mKCP 将以这个时间频率发送数据。请选译一个介于 `10` - `100` 之间的值。默认值为 `50`。",
                    "type": "number"
                },
                "uplinkCapacity": {
                    "description": "上行链路容量，即主机发出数据所用的最大带宽，单位 MB/s，默认值 `5`。注意是 Byte 而非 bit。可以设置为 `0`，表示一个非常小的带宽。",
                    "type": "number"
                },
                "writeBufferSize": {
                    "description": "单个连接的写入缓冲区大小，单位是 MB。默认值为 `2`。\n:::tip\n`readBufferSize` 和 `writeBufferSize` 指定了单个连接所使用的内存大小。在需要高速传输时，指定较大的 `readBufferSize` 和 `writeBufferSize` 会在一定程度上提高速度，但也会使用更多的内存。在网速不超过 20MB/s 时，默认值 1MB 可以满足需求；超过之后，可以适当增加 `readBufferSize` 和 `writeBufferSize` 的值，然后手动平衡速度和内存的关系。\n:::",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "LogObject": {
            "additionalProperties": {},
            "description": "`LogObject` 对应配置文件的 `log` 项。\n```json\n{\n  \"access\": \"文件地址\",\n  \"error\": \"文件地址\",\n  \"loglevel\": \"warning\"\n}\n```",
            "properties": {
                "access": {
                    "description": "访问日志的文件地址，其值是一个合法的文件地址，如`\"/var/log/v2ray/access.log\"`（Linux）或者`\"C:\\\\Temp\\\\v2ray\\\\_access.log\"`（Windows）。当此项不指定或为空值时，表示将日志输出至 stdout。V2Ray 4.20 加入了特殊值`none`，即关闭 access log。",
                    "type": "string"
                },
                "error": {
                    "description": "错误日志的文件地址，其值是一个合法的文件地址，如`\"/var/log/v2ray/error.log\"`（Linux）或者`\"C:\\\\Temp\\\\v2ray\\\\_error.log\"`（Windows）。当此项不指定或为空值时，表示将日志输出至 stdout。V2Ray 4.20 加入了特殊值`none`，即关闭 error log（跟`loglevel: \"none\"`等价）。",
                    "type": "string"
                },
                "loglevel": {
                    "description": "日志的级别。默认值为 `\"warning\"`。\n`\"debug\"`：详细的调试性信息。同时包含所有 `\"info\"` 内容。\n`\"info\"`：V2Ray 在运行时的状态，不影响正常使用。同时包含所有 `\"warning\"` 内容。\n`\"warning\"`：V2Ray 遇到了一些问题，通常是外部问题，不影响 V2Ray 的正常运行，但有可能影响用户的体验。同时包含所有 `\"error\"` 内容。\n`\"error\"`：V2Ray 遇到了无法正常运行的问题，需要立即解决。\n`\"none\"`：不记录任何内容。",
                    "enum": [
                        "debug",
                        "error",
                        "info",
                        "none",
                        "warning"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MuxObject": {
            "additionalProperties": {},
            "description": "Mux 功能是在一条 TCP 连接上分发多个 TCP 连接的数据。实现细节详见 [Mux.Cool](../developer/protocols/muxcool.md)。Mux 是为了减少 TCP 的握手延迟而设计，而非提高连接的吞吐量。使用 Mux 看视频、下载或者测速通常都有反效果。Mux 只需要在客户端启用，服务器端自动适配。\n`MuxObject` 对应 `OutboundObject` 中的 `mux` 项。\n```json\n{\n  \"enabled\": false,\n  \"concurrency\": 8\n}\n```",
            "properties": {
                "concurrency": {
                    "description": "最大并发连接数。最小值 `1`，最大值 `1024`，默认值 `8`。\n填负数，如 `-1`，不加载 mux 模块（v4.22.0+）。\n这个数值表示了一个 TCP 连接上最多承载的 Mux 连接数量。当客户端发出了 8 个 TCP 请求，而 `concurrency=8` 时，V2Ray 只会发出一条实际的 TCP 连接，客户端的 8 个请求全部由这个 TCP 连接传输。",
                    "type": "number"
                },
                "enabled": {
                    "description": "是否启用 Mux 转发请求，默认值 `false`。",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NoneHeaderObject": {
            "additionalProperties": {},
            "description": "不进行伪装\n```json\n{\n  \"type\": \"none\"\n}\n```",
            "properties": {
                "type": {
                    "description": "指定不进行伪装",
                    "enum": [
                        "none"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ObservatoryObject": {
            "additionalProperties": {},
            "description": "```json\n{\n\"subjectSelector\":[\n  \"outbound\"\n]\n}\n```",
            "properties": {
                "probeInterval": {
                    "description": "发起探测的间隔。每经过这个时间，就会对一个服务器进行服务器状态检测。时间格式为数字+单位，比如`\"10s\"`, `\"2h45m\"`，支持的时间单位有 `ns`, `us`, `ms`, `s`, `m`, `h`， 分别对应纳秒、微秒、毫秒、秒、分、时。(4.41.1+)\n:::tip\n此配置项目的名称于 v4.42.0 发生了修改。\n:::",
                    "type": "string"
                },
                "probeURL": {
                    "description": "用于检测连接状态的网址。默认会使用内构的连接状态检测地址。(4.41.1+)\n:::tip\n此目标地址的服务器可以推断出您使用了本程序。如果您使用了第三方提供的服务器，该服务器的运营商可能基于此信息作出不利于您的决定，如展示更多验证码，拒绝服务或封禁您的帐号。\n:::",
                    "type": "string"
                },
                "subjectSelector": {
                    "description": "一个字符串数组，其中每一个字符串将用于和出站协议标识的前缀匹配。在以下几个出站协议标识中：`[ \"a\", \"ab\", \"c\", \"ba\" ]`，`\"selector\": [\"a\"]` 将匹配到 `[ \"a\", \"ab\" ]`。\n被匹配到的出站连接将被定时连接以确定是否可用。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OutboundConfigurationObject": {
            "anyOf": [
                {
                    "$ref": "#/definitions/t<OutboundConfigurationObject,\"blackhole\">"
                },
                {
                    "$ref": "#/definitions/t<OutboundConfigurationObject,\"dns\">"
                },
                {
                    "$ref": "#/definitions/t<OutboundConfigurationObject,\"freedom\">"
                },
                {
                    "$ref": "#/definitions/t<OutboundConfigurationObject,\"http\">"
                },
                {
                    "$ref": "#/definitions/t<OutboundConfigurationObject,\"loopback\">"
                },
                {
                    "$ref": "#/definitions/t<OutboundConfigurationObject,\"shadowsocks\">"
                },
                {
                    "$ref": "#/definitions/t<OutboundConfigurationObject,\"socks\">"
                },
                {
                    "$ref": "#/definitions/t<OutboundConfigurationObject,\"trojan\">"
                },
                {
                    "$ref": "#/definitions/t<OutboundConfigurationObject,\"vless\">"
                },
                {
                    "$ref": "#/definitions/t<OutboundConfigurationObject,\"vmess\">"
                }
            ]
        },
        "OutboundConfigurationObject_1": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"response\": {\n      \"type\": \"none\"\n  }\n}\n```",
            "properties": {
                "response": {
                    "$ref": "#/definitions/ResponseObject",
                    "description": "配置黑洞的响应数据。Blackhole 会在收到待转发数据之后，发送指定的响应数据，然后关闭连接。待转发的数据将被丢弃。如不指定此项，Blackhole 将直接关闭连接。"
                }
            },
            "type": "object"
        },
        "OutboundConfigurationObject_10": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"vnext\": [\n      {\n          \"address\": \"127.0.0.1\",\n          \"port\": 37192,\n          \"users\": [\n              {\n                  \"id\": \"27848739-7e62-4138-9fd3-098a63964b6b\",\n                  \"alterId\": 0,\n                  \"security\": \"auto\",\n                  \"level\": 0\n              }\n          ]\n      }\n  ]\n}\n```",
            "properties": {
                "vnext": {
                    "description": "一个数组，包含一系列的服务器配置",
                    "items": {
                        "$ref": "#/definitions/ServerObject_5"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OutboundConfigurationObject_2": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"network\": \"tcp\",\n  \"address\": \"1.1.1.1\",\n  \"port\": 53\n}\n```",
            "properties": {
                "address": {
                    "description": "(V2Ray 4.16+) 修改 DNS 服务器地址。当不指定时，保持来源中指定的地址不变。",
                    "type": "string"
                },
                "network": {
                    "description": "(V2Ray 4.16+) 修改 DNS 流量的传输层协议，可选的值有 `\"tcp\"` 和 `\"udp\"`。当不指定时，保持来源的传输方式不变。",
                    "enum": [
                        "tcp",
                        "udp"
                    ],
                    "type": "string"
                },
                "port": {
                    "description": "(V2Ray 4.16+) 修改 DNS 服务器端口。当不指定时，保持来源中指定的端口不变。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "OutboundConfigurationObject_3": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"domainStrategy\": \"AsIs\",\n  \"redirect\": \"127.0.0.1:3366\",\n  \"userLevel\": 0\n}\n```",
            "properties": {
                "domainStrategy": {
                    "description": "在目标地址为域名时，Freedom 可以直接向此域名发出连接（`\"AsIs\"`），或者将域名解析为 IP 之后再建立连接（`\"UseIP\"`、`\"UseIPv4\"` 和 `\"UseIPv6\"`）。解析 IP 的步骤会使用 V2Ray [内建的 DNS](../dns.md)。默认值为 `\"AsIs\"`。\n(V2Ray 4.6+) 当使用 `\"UseIP\"` 模式，并且 [出站连接配置](../overview.md#outboundobject) 中指定了 `sendThrough` 时，Freedom 会根据 `sendThrough` 的值自动判断所需的 IP 类型，IPv4 或 IPv6。\n(V2Ray 4.7+) 当使用 `\"UseIPv4\"` 或 `\"UseIPv6\"` 模式时，Freedom 会只使用对应的 IPv4 或 IPv6 地址。当 `sendThrough` 指定了不匹配的本地地址时，将导致连接失败。",
                    "enum": [
                        "AsIs",
                        "UseIP",
                        "UseIPv4",
                        "UseIPv6"
                    ],
                    "type": "string"
                },
                "redirect": {
                    "description": "Freedom 会强制将所有数据发送到指定地址（而不是入站协议指定的地址）。其值为一个字符串，样例：`\"127.0.0.1:80\"`，`\":1234\"`。当地址不指定时，如 `\":443\"`，Freedom 不会修改原先的目标地址。当端口为 `0` 时，如 `\"v2ray.com: 0\"`，Freedom 不会修改原先的端口。",
                    "type": "string"
                },
                "userLevel": {
                    "description": "用户等级，所有连接都使用这一等级。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "OutboundConfigurationObject_4": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"servers\": [\n      {\n          \"address\": \"192.168.108.1\",\n          \"port\": 3128,\n          \"users\": [\n              {\n                  \"user\": \"my-username\",\n                  \"pass\": \"my-password\"\n              }\n          ]\n      }\n  ]\n}\n```\n(V2Ray 4.21.0+)\n:::tip\n应该注意，虽然 `http outbound` 可以作为对外访问的配置，但 `http proxy` 协议没有对传输加密，不适宜经公网中传输，且因不支持 udp 传输将会导致 core 功能受限（Routing 过程的的 DNS 查询不可用）。`http outbound` 更有意义的用法是在特殊情况下，只能使用 `http proxy` 对外访问内部网络中，作为为其他协议连接代理服务器的前置代理使用（见 `OutboundObject` 的 `ProxySettingsObject`）。另因 `http proxy` 只能代理 tcp 协议，udp 系的协议均不能通过。\n:::\n(V2Ray 4.21.1+)\n:::tip\n4.20.0 版本中引入了 http outbound 作为其他协议的前置代理用法中，缺乏了对 TLS 配置的支持。4.21.1 的补丁版本中对 `streamSettings` 中的 `security` 和 `tlsSettings` 保留生效。目前前置代理的用法中，vmess/tcp、vmess/tcp-tls 和 shadowsocks 等三种协议方式可使用，其他传输协议的前置代理用法需后续版本开发支持。\n:::",
            "properties": {
                "address": {
                    "description": "HTTP 代理服务器地址，必填。",
                    "type": "string"
                },
                "port": {
                    "description": "HTTP 代理服务器端口，必填。",
                    "type": "number"
                },
                "servers": {
                    "description": "HTTP 代理服务器配置，若配置多个，循环使用 (RoundRobin)。"
                },
                "user": {
                    "description": "一个数组，数组中每个元素为一个用户帐号。默认值为空。",
                    "items": {
                        "$ref": "#/definitions/AccountObject"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OutboundConfigurationObject_5": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"inboundTag\": \"reentry\"\n}\n```",
            "properties": {
                "inboundTag": {
                    "description": "匹配入站来源的标识。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OutboundConfigurationObject_6": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"servers\": [\n      {\n          \"email\": \"love@v2ray.com\",\n          \"address\": \"127.0.0.1\",\n          \"port\": 1234,\n          \"method\": \"加密方式\",\n          \"password\": \"密码\",\n          \"level\": 0\n      }\n  ]\n}\n```",
            "properties": {
                "servers": {
                    "description": "一个数组，其中每一项是一个 [ServerObject](#serverobject)。",
                    "items": {
                        "$ref": "#/definitions/ServerObject_1"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OutboundConfigurationObject_7": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"servers\": [\n      {\n          \"address\": \"127.0.0.1\",\n          \"port\": 1234,\n          \"users\": [\n              {\n                  \"user\": \"test user\",\n                  \"pass\": \"test pass\",\n                  \"level\": 0\n              }\n          ]\n      }\n  ]\n}\n```\n需要注意：虽然 Socks Outbound 可以作为对外访问的配置，但 Socks 协议没有对传输加密，不适宜经公网中传输。\nSocks Outbound 更有意义的用法是在特殊情况下，只能使用 Socks Proxy 对外访问内部网络中，作为为其他协议连接代理服务器的前置代理使用（见 `OutboundObject` 的 `ProxySettingsObject`）。",
            "properties": {
                "servers": {
                    "description": "Socks 服务器列表，其中每一项是一个服务器配置。",
                    "items": {
                        "$ref": "#/definitions/ServerObject_2"
                    },
                    "type": "array"
                },
                "version": {
                    "description": "Socks 协议版本。 (v4.42.2+)",
                    "enum": [
                        "4",
                        "4a",
                        "5"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OutboundConfigurationObject_8": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"servers\": [\n      {\n          \"address\": \"127.0.0.1\",\n          \"port\": 1234,\n          \"password\": \"password\",\n          \"email\": \"love@v2fly.org\",\n          \"level\": 0\n      }\n  ]\n}\n```",
            "properties": {
                "servers": {
                    "description": "一个数组，其中每一项是一个 [ServerObject](#serverobject)。",
                    "items": {
                        "$ref": "#/definitions/ServerObject_3"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OutboundConfigurationObject_9": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"vnext\": [\n      {\n          \"address\": \"example.com\",\n          \"port\": 443,\n          \"users\": [\n              {\n                  \"id\": \"27848739-7e62-4138-9fd3-098a63964b6b\",\n                  \"encryption\": \"none\",\n                  \"level\": 0\n              }\n          ]\n      }\n  ]\n}\n```",
            "properties": {
                "vnext": {
                    "description": "一个数组，包含一系列指向服务端的配置。",
                    "items": {
                        "$ref": "#/definitions/ServerObject_4"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OutboundObject": {
            "additionalProperties": {},
            "description": "`OutboundObject` 对应配置文件中 `outbounds` 项的一个子元素。\n```json\n{\n  \"sendThrough\": \"0.0.0.0\",\n  \"protocol\": \"协议名称\",\n  \"settings\": {},\n  \"tag\": \"标识\",\n  \"streamSettings\": {},\n  \"proxySettings\": {\n      \"tag\": \"another-outbound-tag\",\n      \"transportLayer\": false\n  },\n  \"mux\": {}\n}\n```",
            "properties": {
                "mux": {
                    "$ref": "#/definitions/MuxObject",
                    "description": "[Mux 配置](#muxobject)。"
                },
                "protocol": {
                    "description": "连接协议名称，可选的值见协议列表。",
                    "type": "string"
                },
                "proxySettings": {
                    "$ref": "#/definitions/ProxySettingsObject",
                    "description": "出站代理配置。当出站代理生效时，此出站协议的 `streamSettings` 将不起作用。"
                },
                "sendThrough": {
                    "description": "用于发送数据的 IP 地址，当主机有多个 IP 地址时有效，默认值为 `\"0.0.0.0\"`。",
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/OutboundConfigurationObject",
                    "description": "具体的配置内容，视协议不同而不同。详见每个协议中的 `OutboundConfigurationObject`。"
                },
                "streamSettings": {
                    "$ref": "#/definitions/StreamSettingsObject",
                    "description": "[底层传输配置](transport.md#streamsettingsobject)"
                },
                "tag": {
                    "description": "此出站连接的标识，用于在其它的配置中定位此连接。当其值不为空时，必须在所有 tag 中唯一。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PolicyObject": {
            "additionalProperties": {},
            "description": "`PolicyObject` 对应配置文件的 `policy` 项。\n```json\n{\n  \"levels\": {\n      \"0\": {\n          \"handshake\": 4,\n          \"connIdle\": 300,\n          \"uplinkOnly\": 2,\n          \"downlinkOnly\": 5,\n          \"statsUserUplink\": false,\n          \"statsUserDownlink\": false,\n          \"bufferSize\": 10240\n      }\n  },\n  \"system\": {\n      \"statsInboundUplink\": false,\n      \"statsInboundDownlink\": false,\n      \"statsOutboundUplink\": false,\n      \"statsOutboundDownlink\": false\n  }\n}\n```",
            "properties": {
                "level": {
                    "$ref": "#/definitions/Record<string,LevelPolicyObject>",
                    "description": "一组键值对，每个键是一个字符串形式的数字（JSON 的要求），比如 `\"0\"`、`\"1\"` 等，双引号不能省略，此数字对应用户等级。每一个值是一个 [LevelPolicyObject](#levelpolicyobject).\n:::tip\n每个入站出站代理现在都可以设置用户等级，V2Ray 会根据实际的用户等级应用不同的本地策略。\n:::"
                },
                "system": {
                    "$ref": "#/definitions/SystemPolicyObject",
                    "description": "V2Ray 系统的策略"
                }
            },
            "type": "object"
        },
        "PortalObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"tag\": \"portal\",\n  \"domain\": \"test.v2fly.org\"\n}\n```",
            "properties": {
                "domain": {
                    "description": "一个域名。当 `portal` 接收到流量时，如果流量的目标域名是此域名，则 `portal` 认为当前连接上 `bridge` 发来的通信连接。而其它流量则会被当成需要转发的流量。`portal` 所做的工作就是把这两类连接进行识别并拼接。\n:::tip\n和其它配置一样，一个 V2Ray 既可以作为 `bridge`，也可以作为 `portal`，也可以同时两者，以适用于不同的场景需要。\n:::\n`bridge` 通常需要两个出站代理，一个用于连接 `portal`，另一个用于发送实际的流量。也就是说，你需要用路由区分两种流量。\n反向代理配置:\n```json\n{\n\"bridges\": [\n    {\n        \"tag\": \"bridge\",\n        \"domain\": \"test.v2fly.org\"\n    }\n]\n}\n```\n出站代理:\n```json\n{\n\"tag\": \"out\",\n\"protocol\": \"freedom\",\n\"settings\": {\n    \"redirect\": \"127.0.0.1:80\" // 将所有流量转发到网页服务器\n}\n},\n{\n\"protocol\": \"vmess\",\n\"settings\": {\n    \"vnext\": [\n        {\n            \"address\": \"portal 的 IP 地址\",\n            \"port\": 1024,\n            \"users\": [\n                {\n                    \"id\": \"27848739-7e62-4138-9fd3-098a63964b6b\"\n                }\n            ]\n        }\n    ]\n},\n\"tag\": \"interconn\"\n}\n```\n路由配置:\n```json\n\"routing\": {\n\"rules\": [\n    {\n        \"type\": \"field\",\n        \"inboundTag\": [\n            \"bridge\"\n        ],\n        \"domain\": [\n            \"full:test.v2fly.org\"\n        ],\n        \"outboundTag\": \"interconn\"\n    },\n    {\n        \"type\": \"field\",\n        \"inboundTag\": [\n            \"bridge\"\n        ],\n        \"outboundTag\": \"out\"\n    }\n]\n}\n```\n`portal` 通常需要两个入站代理，一个用于接收 `bridge` 的连接，另一个用于接收实际的流量。同时你也需要用路由区分两种流量。\n反向代理配置:\n```json\n{\n\"portals\": [\n    {\n        \"tag\": \"portal\",\n        \"domain\": \"test.v2fly.org\" // 必须和 bridge 的配置一样\n    }\n]\n}\n```\n入站代理:\n```json\n{\n\"tag\": \"external\",\n\"port\": 80, // 开放 80 端口，用于接收外部的 HTTP 访问\n\"protocol\": \"dokodemo-door\",\n\"settings\": {\n    \"address\": \"127.0.0.1\",\n    \"port\": 80,\n    \"network\": \"tcp\"\n}\n},\n{\n\"port\": 1024, // 用于接收 bridge 的连接\n\"tag\": \"interconn\",\n\"protocol\": \"vmess\",\n\"settings\": {\n    \"clients\": [\n        {\n            \"id\": \"27848739-7e62-4138-9fd3-098a63964b6b\"\n        }\n    ]\n}\n}\n```\n路由配置:\n```json\n\"routing\": {\n\"rules\": [\n    {\n        \"type\": \"field\",\n        \"inboundTag\": [\n            \"external\"\n        ],\n        \"outboundTag\": \"portal\"\n    },\n    {\n        \"type\": \"field\",\n        \"inboundTag\": [\n            \"interconn\"\n        ],\n        \"outboundTag\": \"portal\"\n    }\n]\n}\n```\n:::tip\n在运行过程中，建议先启用 `bridge`，再启用 `portal`。\n:::",
                    "type": "string"
                },
                "tag": {
                    "description": "`portal` 的标识。在 [路由](routing.md) 中使用 `outboundTag` 将流量转发到这个 `portal`。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProxySettingsObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"tag\": \"another-outbound-tag\",\n  \"transportLayer\": false\n}\n```",
            "properties": {
                "tag": {
                    "description": "当指定另一个出站连接的标识时，此出站连接发出的数据，将被转发至所指定的出站连接发出。",
                    "type": "string"
                },
                "transportLayer": {
                    "description": "是否启用传输层转发支持。在启用后,此出站连接的传输层协议将保持生效（如果传输层协议支持）。(v4.35.0+)\n如果不启用此选项, 在转发时传输层协议将失效，只能使用默认的 TCP 传输协议。",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "QuicObject": {
            "additionalProperties": {},
            "description": "`QuicObject` 对应传输配置的 `quicSettings` 项。对接的两端的配置必须完全一致，否则连接失败。QUIC 强制要求开启 TLS，在传输配置中没有开启 TLS 时，V2Ray 会自行签发一个证书进行 TLS 通讯。在使用 QUIC 传输时，可以关闭 VMess 的加密。\n```json\n{\n  \"security\": \"none\",\n  \"key\": \"\",\n  \"header\": {\n      \"type\": \"none\"\n  }\n}\n```",
            "properties": {
                "header": {
                    "$ref": "#/definitions/HeaderObject_1",
                    "description": "数据包头部伪装设置"
                },
                "key": {
                    "description": "加密时所用的密钥。可以是任意字符串。当 `security` 不为 `\"none\"` 时有效。",
                    "type": "string"
                },
                "security": {
                    "description": "加密方式。默认值为不加密。\n此加密是对 QUIC 数据包的加密，加密后数据包无法被探测。",
                    "enum": [
                        "aes-128-gcm",
                        "chacha20-poly1305",
                        "none"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Record<string,LevelPolicyObject>": {
            "type": "object"
        },
        "Record<string,string>": {
            "type": "object"
        },
        "Record<string,string[]>": {
            "type": "object"
        },
        "ResponseObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"type\": \"none\"\n}\n```",
            "properties": {
                "type": {
                    "description": "当 `type` 为 `\"none\"`（默认值）时，Blackhole 将直接关闭连接。当 `type` 为 `\"http\"` 时，Blackhole 会发回一个简单的 HTTP 403 数据包，然后关闭连接。",
                    "enum": [
                        "http",
                        "none"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ReverseObject": {
            "additionalProperties": {},
            "description": "`ReverseObject` 对应配置文件的 `reverse` 项。\n```json\n{\n  \"bridges\": [\n      {\n          \"tag\": \"bridge\",\n          \"domain\": \"test.v2fly.org\"\n      }\n  ],\n  \"portals\": [\n      {\n          \"tag\": \"portal\",\n          \"domain\": \"test.v2fly.org\"\n      }\n  ]\n}\n```",
            "properties": {
                "bridges": {
                    "description": "一个数组，每一项表示一个 `bridge`。每个 `bridge` 的配置是一个 [BridgeObject](#bridgeobject)。",
                    "items": {
                        "$ref": "#/definitions/BridgeObject"
                    },
                    "type": "array"
                },
                "portals": {
                    "description": "一个数组，每一项表示一个 `portal`。每个 `portal` 的配置是一个 [PortalObject](#bridgeobject)。",
                    "items": {
                        "$ref": "#/definitions/PortalObject"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RoutingObject": {
            "additionalProperties": {},
            "description": "`RoutingObject` 对应配置文件的 `routing` 项。\n```json\n{\n  \"domainStrategy\": \"AsIs\",\n  \"domainMatcher\": \"mph\",\n  \"rules\": [],\n  \"balancers\": []\n}\n```",
            "properties": {
                "balancers": {
                    "description": "（V2Ray 4.4+）一个数组，数组中每一项是一个负载均衡器的配置。当一个规则指向一个负载均衡器时，V2Ray 会通过此负载均衡器选出一个 `outbound`，然后由它转发流量。",
                    "items": {
                        "$ref": "#/definitions/BalancerObject"
                    },
                    "type": "array"
                },
                "domainMatcher": {
                    "description": "选择要使用的域名匹配算法。\n`linear`：使用线性匹配算法，默认值；\n`mph`：使用最小完美散列（minimal perfect hash）算法（v4.36.1+）。\n测试数据约 17 万条，匹配速度提升约 30%，内存占用减少约 15%",
                    "enum": [
                        "linear",
                        "mph"
                    ],
                    "type": "string"
                },
                "domainStrategy": {
                    "description": "域名解析策略。\n`AsIs`：只使用域名进行路由选择，默认值；\n`IPIfNonMatch`：当域名没有匹配任何基于域名的规则时，将域名解析成 IP（A 记录或 AAAA 记录），进行基于 IP 规则的匹配；\n当一个域名有多个 IP 地址时，会尝试匹配所有的 IP 地址，直到其中一个与某个 IP 规则匹配为止；\n解析后的 IP 仅在路由选择时起作用，转发的数据包中依然使用原始域名。\n`IPOnDemand`：当匹配时碰到任何基于 IP 的规则，立即将域名解析为 IP 进行匹配。",
                    "enum": [
                        "AsIs",
                        "IPIfNonMatch",
                        "IPOnDemand"
                    ],
                    "type": "string"
                },
                "rules": {
                    "description": "对应一个数组，数组中每一项是一个规则。对于每一个连接，路由将根据这些规则依次进行判断，当一个规则生效时，即将这个连接转发至它所指定的 `outboundTag`（或 `balancerTag`，V2Ray 4.4+）。当没有匹配到任何规则时，流量默认被转发至第一个 `outbound`。",
                    "items": {
                        "$ref": "#/definitions/RuleObject"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RuleObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"domainMatcher\": \"mph\",\n  \"type\": \"field\",\n  \"domains\": [\n      \"baidu.com\",\n      \"qq.com\",\n      \"geosite:cn\",\n      \"ext:customizedGeoSiteFile.dat:cn\"\n  ],\n  \"ip\": [\n      \"0.0.0.0/8\",\n      \"10.0.0.0/8\",\n      \"fc00::/7\",\n      \"fe80::/10\",\n      \"geoip:cn\",\n      \"geoip:!cn\",\n      \"ext:customizedGeoIPFile.dat:cn\",\n      \"ext:customizedGeoIPFile.dat:!cn\",\n      \"ext-ip:customizedGeoIPFile.dat:cn\",\n      \"ext-ip:customizedGeoIPFile.dat:!cn\"\n  ],\n  \"port\": \"53,443,1000-2000\",\n  \"sourcePort\": \"53,443,1000-2000\",\n  \"network\": \"tcp\",\n  \"source\": [\n      \"10.0.0.1\"\n  ],\n  \"user\": [\n      \"love@v2ray.com\"\n  ],\n  \"inboundTag\": [\n      \"tag-vmess\"\n  ],\n  \"protocol\": [\n      \"http\",\n      \"tls\",\n      \"bittorrent\"\n  ],\n  \"attrs\": \"attrs[':method'] == 'GET'\",\n  \"outboundTag\": \"direct\",\n  \"balancerTag\": \"balancer\"\n}\n```\n:::tip\n当多个属性同时指定时，这些属性需要同时满足，才可以使当前规则生效。即 `domains` 和 `ip` 规则需要分开使用。\n:::",
            "properties": {
                "attrs": {
                    "description": "（V2Ray 4.18+）一段脚本，用于检测流量的属性值。当此脚本返回真值时，此规则生效。\n脚本语言为 [Starlark](https://github.com/bazelbuild/starlark)，它的语法是 Python 的子集。脚本接受一个全局变量 `attrs`，其中包含了流量相关的属性。\n目前只有 HTTP 入站代理会设置这一属性。\n示例：\n 检测 HTTP GET：`attrs[':method'] == 'GET'`\n 检测 HTTP Path：`attrs[':path'].startswith('/test')`\n 检测 Content Type：`attrs['accept'].index('text/html') >= 0`",
                    "type": "string"
                },
                "balancerTag": {
                    "description": "对应一个负载均衡器的标识。`balancerTag` 和 `outboundTag` 须二选一。当同时指定时，`outboundTag` 生效。",
                    "type": "string"
                },
                "domainMatcher": {
                    "description": "选择要使用的域名匹配算法。此处 `domainMatcher` 的优先级高于 `RoutingObject` 配置的 `domainMatcher`。\n`linear`：使用线性匹配算法，默认值；\n`mph`：使用最小完美散列（minimal perfect hash）算法（v4.36.1+）。\n测试数据约 17 万条，匹配速度提升约 30%，内存占用减少约 15%",
                    "enum": [
                        "linear",
                        "mph"
                    ],
                    "type": "string"
                },
                "domains": {
                    "description": "一个数组，数组每一项是一个域名的匹配。有以下几种形式：\n**纯字符串**：当此字符串匹配目标域名中任意部分，该规则生效。比如 `sina.com` 可以匹配 `sina.com`、`sina.com.cn`、`sina.company` 和 `www.sina.com`，但不匹配 `sina.cn`。\n**正则表达式**：由 `regexp:` 开始，余下部分是一个正则表达式。当此正则表达式匹配目标域名时，该规则生效。例如 `regexp:\\.goo.*\\.com$` 匹配 `www.google.com`、`fonts.googleapis.com`，但不匹配 `google.com`。\n**子域名（推荐）**：由 `domain:` 开始，余下部分是一个域名。当此域名是目标域名或其子域名时，该规则生效。例如 `domain:v2ray.com` 匹配 `www.v2ray.com`、`v2ray.com`，但不匹配 `xv2ray.com`。\n**完整匹配**：由 `full:` 开始，余下部分是一个域名。当此域名完整匹配目标域名时，该规则生效。例如 `full:v2ray.com` 匹配 `v2ray.com` 但不匹配 `www.v2ray.com`。\n**预定义域名列表**：由 `geosite:` 开头，余下部分是一个类别名称（域名列表），如 `geosite:google` 或者 `geosite:cn`。名称及域名列表参考[预定义域名列表](#预定义域名列表)。\n**从文件中加载域名**：形如 `ext:file:tag`，必须以 `ext:` 开头，后面跟文件名和标签，文件存放在[资源目录](env.md#资源文件路径)中，文件格式与 `geosite.dat` 相同，标签必须在文件中存在。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "inboundTag": {
                    "description": "一个数组，数组内每一项是一个标识。当某一项匹配入站协议的标识时，此规则生效。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ip": {
                    "description": "一个数组，数组内每一项代表一个 IP 范围。当某一项匹配目标 IP 时，此规则生效。有以下几种形式：\nIP：形如 `127.0.0.1`。\n[CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)：形如 `10.0.0.0/8`。\nGeoIP：\n形如 `geoip:cn` 为`正向匹配`，即为匹配「中国大陆 IP 地址」。后面跟双字符[国家或地区代码](https://zh.wikipedia.org/wiki/%E5%9C%8B%E5%AE%B6%E5%9C%B0%E5%8D%80%E4%BB%A3%E7%A2%BC)，支持所有可以上网的国家和地区。\n形如 `geoip:!cn` 为`反向匹配`，即为匹配「非中国大陆 IP 地址」。后面跟双字符[国家或地区代码](https://zh.wikipedia.org/wiki/%E5%9C%8B%E5%AE%B6%E5%9C%B0%E5%8D%80%E4%BB%A3%E7%A2%BC)，支持所有可以上网的国家和地区。\n特殊值：`geoip:private`（V2Ray 3.5+），包含所有私有地址，如 `127.0.0.1`。\n从文件中加载 IP：\n形如 `ext:file:tag` 和 `ext-ip:file:tag` 为`正向匹配`，即为匹配 「tag 内的 IP 地址」。\n形如 `ext:file:!tag` 和 `ext-ip:file:!tag` 为`反向匹配`，即为匹配「非 tag 内的 IP 地址」。\n必须以 `ext:` 或 `ext-ip:` 开头，后面跟文件名、`标签`或 `!标签`，文件存放在[资源目录](env.md#资源文件路径)中，文件格式与 `geoip.dat` 相同，标签必须在文件中存在。\n:::tip\n`ext:geoip.dat:cn` 和 `ext-ip:geoip.dat:cn` 等价于 `geoip:cn`；\n`ext:geoip.dat:!cn` 和 `ext-ip:geoip.dat:!cn` 等价于 `geoip:!cn`。\n:::",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "network": {
                    "description": "可选的值有 \"tcp\"、\"udp\" 或 \"tcp,udp\"，当连接方式是指定的方式时，此规则生效。",
                    "enum": [
                        "tcp",
                        "tcp,udp",
                        "udp"
                    ],
                    "type": "string"
                },
                "outboundTag": {
                    "description": "对应一个额外 [出站连接配置](outbounds.md#outboundobject) 的标识。",
                    "type": "string"
                },
                "port": {
                    "description": "目标端口范围，有三种形式：\n`a-b`：a 和 b 均为正整数，且小于 65536。这个范围是一个前后闭合区间，当端口落在此范围内时，此规则生效。\n`a`：a 为正整数，且小于 65536。当目标端口为 a 时，此规则生效。\n（V2Ray 4.18+）以上两种形式的混合，以逗号 \",\" 分隔。形如：`53,443,1000-2000`。",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "protocol": {
                    "description": "一个数组，数组内每一项表示一种协议。当某一个协议匹配当前连接的流量时，此规则生效。必须开启入站代理中的 `sniffing` 选项。",
                    "items": {
                        "enum": [
                            "bittorrent",
                            "http",
                            "tls"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "source": {
                    "description": "一个数组，数组内每一项代表一个 IP 范围，形式有 IP、CIDR、GeoIP 和从文件中加载 IP。当某一项匹配来源 IP 时，此规则生效。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sourcePort": {
                    "description": "来源端口范围，格式同上",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "type": {
                    "description": "目前只支持 `field` 这一个选项。",
                    "enum": [
                        "field"
                    ],
                    "type": "string"
                },
                "user": {
                    "description": "一个数组，数组内每一项是一个邮箱地址。当某一项匹配来源用户时，此规则生效。当前 Shadowsocks 和 VMess 支持此规则。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ServerObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"address\": \"223.5.5.5\",\n  \"port\": 5353,\n  \"clientIp\": \"5.6.7.8\",\n  \"skipFallback\": true,\n  \"domains\": [\n      \"domain:baidu.com\",\n      \"geosite:cn\"\n  ],\n  \"expectIPs\": [\n      \"geoip:cn\",\n      \"ext:customizedGeoIPFile.dat:cn\",\n      \"ext-ip:customizedGeoIPFile.dat:cn\"\n  ]\n}\n```",
            "properties": {
                "address": {
                    "description": "DNS 服务器地址，如 `8.8.8.8`、`tcp+local://8.8.8.8:53` 和 `https://dns.google/dns-query` 等，详情查看[支持的 DNS 协议及其路由策略](#支持的-dns-协议及其路由策略)。",
                    "type": "string"
                },
                "clientIp": {
                    "description": "当前网络的 IP 地址。用于 DNS 查询时通知 DNS 服务器，客户端所在的地理位置（不能是私有 IP 地址）。此处 `clientIp` 的优先级高于外层配置的 `clientIp`，由此可实现「使用不同的 `clientIp` 从相同的 DNS 服务器获取同一域名在不同地区的解析结果」。 (4.34.0+)\n:::tip\n此功能需要 DNS 服务器支持 EDNS Client Subnet（RFC7871）。\n:::",
                    "type": "string"
                },
                "domains": {
                    "description": "一个域名列表，此列表包含的域名，将优先使用此服务器进行查询。域名格式和[路由配置](routing.md#ruleobject)中相同。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "expectIPs": {
                    "description": "（V2Ray 4.22.0+）一个 IP 范围列表，格式和[路由配置](routing.md#ruleobject)中相同。\n当配置此项时，V2Ray DNS 会对返回的 IP 进行校验，只返回满足 expectIPs 列表的地址。如果未配置此项，会原样返回 IP 地址。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "port": {
                    "description": "DNS 服务器端口，如 `53`。此项缺省时默认为 `53`。当使用 DOH、DOHL、DOQL 模式时，该项无效。非标准端口应在 URL 中指定。",
                    "type": "number"
                },
                "skipFallback": {
                    "description": "(4.37.2+) 在 DNS 回退（fallback）查询过程中，是否跳过本 DNS。默认为 false，即为不跳过。详情见 [DNS 处理流程](#dns-处理流程)。\n:::tip\n本选项可用于防止 DNS 回退（fallback）查询 `A` 和 `AAAA` 记录过程中的 DNS 泄漏。\n:::\n:::warning\n如果 [DnsObject](#dnsobject) 中的 `disableFallback` 设置为 `true`，则本选项不会生效。\n:::",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ServerObject_1": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"email\": \"love@v2ray.com\",\n  \"address\": \"127.0.0.1\",\n  \"port\": 1234,\n  \"method\": \"加密方式\",\n  \"password\": \"密码\",\n  \"level\": 0,\n  \"ivCheck\": false\n}\n```",
            "properties": {
                "address": {
                    "description": "Shadowsocks 服务器地址，支持 IPv4、IPv6 和域名。必填。",
                    "type": "string"
                },
                "email": {
                    "description": "邮件地址，可选，用于标识用户",
                    "type": "string"
                },
                "ivCheck": {
                    "description": "是否启用 IV 检查功能。可以使某些 IV 重放攻击更加困难。 (4.37.0+)\n目前此功能默认不启用，但是在未来版本中会默认处于启用状态。\n`\"aes-256-gcm\"`\n`\"aes-128-gcm\"`\n`\"chacha20-poly1305\"` 或 `\"chacha20-ietf-poly1305\"`\n`\"none\"` 或 `\"plain\"`",
                    "type": "boolean"
                },
                "level": {
                    "description": "用户等级",
                    "type": "number"
                },
                "method": {
                    "description": "必填。可选的值见[加密方式列表](#加密方式列表)",
                    "type": "string"
                },
                "password": {
                    "description": "必填。任意字符串。Shadowsocks 协议不限制密码长度，但短密码会更可能被破解，建议使用 16 字符或更长的密码。",
                    "type": "string"
                },
                "port": {
                    "description": "Shadowsocks 服务器端口。必填。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ServerObject_2": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"address\": \"127.0.0.1\",\n  \"port\": 1234,\n  \"users\": [\n      {\n          \"user\": \"test user\",\n          \"pass\": \"test pass\",\n          \"level\": 0\n      }\n  ]\n}\n```",
            "properties": {
                "address": {
                    "description": "服务器地址。",
                    "type": "string"
                },
                "port": {
                    "description": "服务器端口",
                    "type": "number"
                },
                "users": {
                    "description": "用户列表，其中每一项一个用户配置。当列表不为空时，Socks 客户端会使用此用户信息进行认证；如未指定，则不进行认证。",
                    "items": {
                        "$ref": "#/definitions/UserObject"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ServerObject_3": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"address\": \"127.0.0.1\",\n  \"port\": 1234,\n  \"password\": \"password\",\n  \"email\": \"love@v2fly.org\",\n  \"level\": 0\n}\n```",
            "properties": {
                "address": {
                    "description": "服务器地址，支持 IPv4、IPv6 和域名。必填。",
                    "type": "string"
                },
                "email": {
                    "description": "邮件地址，可选，用于标识用户",
                    "type": "string"
                },
                "level": {
                    "description": "用户等级",
                    "type": "number"
                },
                "password": {
                    "description": "必填，任意字符串。",
                    "type": "string"
                },
                "port": {
                    "description": "服务器端口，必填。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ServerObject_4": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"address\": \"example.com\",\n  \"port\": 443,\n  \"users\": []\n}\n```",
            "properties": {
                "address": {
                    "description": "地址，指向服务端，支持域名、IPv4、IPv6。",
                    "type": "string"
                },
                "port": {
                    "description": "端口，通常与服务端监听的端口相同。",
                    "type": "number"
                },
                "users": {
                    "description": "一组服务端认可的用户。",
                    "items": {
                        "$ref": "#/definitions/UserObject_1"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ServerObject_5": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"address\": \"127.0.0.1\",\n  \"port\": 37192,\n  \"users\": []\n}\n```",
            "properties": {
                "address": {
                    "description": "服务器地址，支持 IP 地址或者域名。",
                    "type": "string"
                },
                "port": {
                    "description": "服务器端口号。",
                    "type": "number"
                },
                "users": {
                    "description": "一组服务器认可的用户",
                    "items": {
                        "$ref": "#/definitions/UserObject_2"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SniffingObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"enabled\": true,\n  \"destOverride\": [\n      \"http\",\n      \"tls\"\n  ],\n  \"metadataOnly\": false\n}\n```",
            "properties": {
                "destOverride": {
                    "description": "当流量为指定类型时，按其中包括的目标地址重置当前连接的目标。\n`fakedns+others` 选项会优先进行 FakeDNS 虚拟 DNS 服务器匹配。如果 IP 地址处于虚拟 DNS 服务器的 IP 地址区间内，但是没有找到相应的域名记录时，使用 `http`、`tls` 和 `quic` 的匹配结果。此选项仅在 `metadataOnly` 为 `false` 时有效。(v4.38.0+)",
                    "items": {
                        "enum": [
                            "fakedns",
                            "fakedns+others",
                            "http",
                            "quic",
                            "tls"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "enabled": {
                    "description": "是否开启流量探测。",
                    "type": "boolean"
                },
                "metadataOnly": {
                    "description": "是否仅使用元数据推断目标地址而不截取流量内容。只有元数据流量目标侦测模块会被激活。\n如果关闭仅使用元数据推断目标地址，客户端必须先发送数据，代理服务器才会实际建立连接。此行为与需要服务器首先发起第一个消息的协议如 SMTP 协议不兼容。\n:::tip\n[虚拟 DNS 服务器](fakedns.md) 是一个元数据流量目标地址侦测模块。其他流量探测模块需要关闭 metadataOnly 才能被激活。\n:::",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SockoptObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"mark\": 0,\n  \"tcpFastOpen\": false,\n  \"tcpFastOpenQueueLength\": 4096,\n  \"tproxy\": \"off\",\n  \"tcpKeepAliveInterval\": 0\n}\n```",
            "properties": {
                "mark": {
                    "description": "一个整数。当其值非零时，在出站连接上标记 SO_MARK。\n仅适用于 Linux 系统。\n需要 CAP_NET_ADMIN 权限。",
                    "type": "number"
                },
                "tcpFastOpen": {
                    "description": "是否启用 [TCP Fast Open](https://zh.wikipedia.org/wiki/TCP%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80)。当其值为 `true` 时，强制开启 TFO；当其值为 `false` 时，强制关闭 TFO；当此项不存在时，使用系统默认设置。可用于入站出站连接。\n仅在以下版本（或更新版本）的操作系统中可用:\nWindows 10 (1604)\nMac OS 10.11 / iOS 9\nLinux 3.16：系统已默认开启，无需配置。\nFreeBSD 10.3",
                    "type": "boolean"
                },
                "tcpFastOpenQueueLength": {
                    "description": "入站连接的 [TCP Fast Open](https://zh.wikipedia.org/wiki/TCP%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80) 队列长度，默认值为 `4096`，仅在 Linux 中可用 (v4.43.0+)。",
                    "type": "number"
                },
                "tcpKeepAliveInterval": {
                    "description": "TCP 保持活跃的数据包的发送间隔，以秒为单位（仅适用于 Linux）。 (v4.39.0+)\n0 代表保持默认值。",
                    "type": "number"
                },
                "tproxy": {
                    "description": "是否开启透明代理（仅适用于 Linux）。\n`\"redirect\"`：使用 Redirect 模式的透明代理。支持 TCP 和 UDP 连接。\n`\"tproxy\"`：使用 TProxy 模式的透明代理。支持 TCP 和 UDP 连接。\n`\"off\"`：关闭透明代理。\n透明代理需要 Root 或 CAP\\_NET\\_ADMIN 权限。\n:::tip\n当 [Dokodemo-door](protocols/dokodemo.md) 中指定了 `followRedirect`，且 `sockopt.tproxy` 为空时，`sockopt.tproxy` 的值会被设为 `\"redirect\"`。\n:::",
                    "enum": [
                        "off",
                        "redirect",
                        "tproxy"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StatsObject": {
            "additionalProperties": {},
            "description": "`StatsObject` 对应配置文件的 `stats` 项。\n```json\n{\n}\n```\n目前统计信息没有任何参数，只要 `StatsObject` 项存在，内部的统计即会开启。同时你还需要在 [Policy](policy.md) 中开启对应的项，才可以统计对应的数据。\n目前已有的统计信息如下：\n特定用户的上行流量，单位字节。\n特定用户的下行流量，单位字节。\n:::tip\n如果对应用户没有指定 Email，则不会开启统计。\n:::\n特定入站代理的上行流量，单位字节。\n特定入站代理的下行流量，单位字节。\n（V2Ray 4.26.0+）特定出站代理的上行流量，单位字节。\n（V2Ray 4.26.0+）特定出站代理的下行流量，单位字节。",
            "type": "object"
        },
        "StrategyObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"type\": \"random\"\n}\n```",
            "properties": {
                "type": {
                    "description": "进行负载均衡的策略类型。\n可以填入的类型包括 `random` 以及 `leastPing` (v4.38.0+).\n`random` 会从出站中随机选出一个作为最终的出站连接。\n`leastPing` 会根据观测记录选择 HTTPS GET 请求完成时间最快的一个出站连接。\n负载均衡策略依赖于出站 [连接观测](observatory.md) 组件的观测记录。\n此列表由 [domain-list-community](https://github.com/v2fly/domain-list-community) 项目维护，预置于每一个 V2Ray 的安装包中，文件名为 `geosite.dat`。这个文件包含了一些常见的域名，使用方式：`geosite:listname`，如 `geosite:google` 表示对 `domain-list-community` 项目 `data` 目录里的 `google` 文件内包含的域名，进行路由筛选或 DNS 筛选。\n:::tip\n如在使用 `geosite.dat` 过程中，遇到问题或发现缺少某些域名，欢迎到 [v2fly/domain-list-community](https://github.com/v2fly/domain-list-community) 提 [issue](https://github.com/v2fly/domain-list-community/issues) 或 [pull request](https://github.com/v2fly/domain-list-community/pulls)。\n:::\n常见的域名有：\n`category-ads`：包含了常见的广告域名。\n`category-ads-all`：包含了常见的广告域名，以及广告提供商的域名。\n`tld-cn`：包含了 CNNIC 管理的用于中国大陆的顶级域名，如以 `.cn`、`.中国` 结尾的域名。\n`tld-!cn`：包含了非中国大陆使用的顶级域名，如以 `.hk`（香港）、`.tw`（台湾）、`.jp`（日本）、`.sg`（新加坡）、`.us`（美国）`.ca`（加拿大）等结尾的域名。\n`geolocation-cn`：包含了常见的大陆站点域名。\n`geolocation-!cn`：包含了常见的非大陆站点域名，同时包含了 `tld-!cn`。\n`cn`：相当于 `geolocation-cn` 和 `tld-cn` 的合集。\n`apple`：包含了 Apple 旗下绝大部分域名。\n`google`：包含了 Google 旗下绝大部分域名。\n`microsoft`：包含了 Microsoft 旗下绝大部分域名。\n`facebook`：包含了 Facebook 旗下绝大部分域名。\n`twitter`：包含了 Twitter 旗下绝大部分域名。\n`telegram`：包含了 Telegram 旗下绝大部分域名。\n更多类别，请查看 [data 目录](https://github.com/v2fly/domain-list-community/tree/master/data)。\nV2Ray 内置了多种读取和解码 `geoip.dat` 和 `geosite.dat` 文件的加载器 (v4.39.0+)。\n本项设置由 `v2ray.conf.geoloader` 环境变量控制，详情请查看[环境变量](env.md#geodata-文件加载器)。",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StreamSettingsObject": {
            "additionalProperties": {},
            "description": "`StreamSettingsObject` 对应出站入站协议中的 `streamSettings` 项。每一个入站、出站连接都可以分别配置不同的传输配置，都可以设置 `streamSettings` 来进行一些传输的配置。\n```json\n{\n  \"network\": \"tcp\",\n  \"security\": \"none\",\n  \"tlsSettings\": {},\n  \"tcpSettings\": {},\n  \"kcpSettings\": {},\n  \"wsSettings\": {},\n  \"httpSettings\": {},\n  \"quicSettings\": {},\n  \"dsSettings\": {},\n  \"grpcSettings\": {},\n  \"sockopt\": {\n      \"mark\": 0,\n      \"tcpFastOpen\": false,\n      \"tcpFastOpenQueueLength\": 4096,\n      \"tproxy\": \"off\",\n      \"tcpKeepAliveInterval\": 0\n  }\n}\n```",
            "properties": {
                "dsSettings": {
                    "$ref": "#/definitions/DomainSocketObject",
                    "description": "当前连接的 Domain socket 配置，仅当此连接使用 Domain socket 时有效。配置内容与上面的全局配置相同。"
                },
                "grpcSettings": {
                    "$ref": "#/definitions/grpcObject",
                    "description": "当前连接的 gRPC 配置，仅当此连接使用 gRPC 时有效。配置内容与上面的全局配置相同。"
                },
                "httpSettings": {
                    "$ref": "#/definitions/HttpObject",
                    "description": "当前连接的 HTTP/2 配置，仅当此连接使用 HTTP/2 时有效。配置内容与上面的全局配置相同。"
                },
                "kcpSettings": {
                    "$ref": "#/definitions/KcpObject",
                    "description": "当前连接的 mKCP 配置，仅当此连接使用 mKCP 时有效。配置内容与上面的全局配置相同。"
                },
                "network": {
                    "description": "数据流所使用的网络类型，默认值为 `\"tcp\"`",
                    "enum": [
                        "domainsocket",
                        "grpc",
                        "http",
                        "kcp",
                        "quic",
                        "tcp",
                        "ws"
                    ],
                    "type": "string"
                },
                "quicSettings": {
                    "$ref": "#/definitions/QuicObject",
                    "description": "当前连接的 QUIC 配置，仅当此连接使用 QUIC 时有效。配置内容与上面的全局配置相同。"
                },
                "security": {
                    "description": "是否启用传输层加密，支持的选项有 `\"none\"` 表示不加密（默认值），`\"tls\"` 表示使用 [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security)。",
                    "enum": [
                        "none",
                        "tls"
                    ],
                    "type": "string"
                },
                "sockopt": {
                    "$ref": "#/definitions/SockoptObject",
                    "description": "用作透明代理的配置。"
                },
                "tcpSettings": {
                    "$ref": "#/definitions/TcpObject",
                    "description": "当前连接的 TCP 配置，仅当此连接使用 TCP 时有效。配置内容与上面的全局配置相同。"
                },
                "tlsSettings": {
                    "$ref": "#/definitions/TLSObject",
                    "description": "TLS 配置。TLS 由 Golang 提供，支持 TLS 1.3，不支持 DTLS。"
                },
                "wsSettings": {
                    "$ref": "#/definitions/WebSocketObject",
                    "description": "当前连接的 WebSocket 配置，仅当此连接使用 WebSocket 时有效。配置内容与上面的全局配置相同。"
                }
            },
            "type": "object"
        },
        "SystemPolicyObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"statsInboundUplink\": false,\n  \"statsInboundDownlink\": false,\n  \"statsOutboundUplink\": false,\n  \"statsOutboundDownlink\": false\n}\n```",
            "properties": {
                "statsInboundDownlink": {
                    "description": "当值为 `true` 时，开启所有入站代理的下行流量统计。",
                    "type": "boolean"
                },
                "statsInboundUplink": {
                    "description": "当值为 `true` 时，开启所有入站代理的上行流量统计。",
                    "type": "boolean"
                },
                "statsOutboundDownlink": {
                    "description": "（ V2Ray 4.26.0+ ） 当值为 `true` 时，开启所有出站代理的下行流量统计。",
                    "type": "boolean"
                },
                "statsOutboundUplink": {
                    "description": "（ V2Ray 4.26.0+ ）当值为 `true` 时，开启所有出站代理的上行流量统计。",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TLSObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"serverName\": \"v2ray.com\",\n  \"alpn\": [\n      \"h2\",\n      \"http/1.1\"\n  ],\n  \"allowInsecure\": false,\n  \"disableSystemRoot\": false,\n  \"certificates\": [],\n  \"verifyClientCertificate\": false,\n  \"pinnedPeerCertificateChainSha256\": \"\"\n}\n```",
            "properties": {
                "allowInsecure": {
                    "description": "是否允许不安全连接（仅用于客户端）。默认值为 `false`。当值为 `true` 时，V2Ray 不会检查远端主机所提供的 TLS 证书的有效性。",
                    "type": "boolean"
                },
                "alpn": {
                    "description": "一个字符串数组，指定了 TLS 握手时指定的 ALPN 数值。默认值为 `[\"h2\", \"http/1.1\"]`。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "certificates": {
                    "description": "证书列表，其中每一项表示一个证书（建议 fullchain）。",
                    "items": {
                        "$ref": "#/definitions/CertificateObject"
                    },
                    "type": "array"
                },
                "disableSystemRoot": {
                    "description": "（V2Ray 4.18+）是否禁用操作系统自带的 CA 证书。默认值为 `false`。当值为 `true` 时，V2Ray 只会使用 `certificates` 中指定的证书进行 TLS 握手。当值为 `false` 时，V2Ray 只会使用操作系统自带的 CA 证书进行 TLS 握手。",
                    "type": "boolean"
                },
                "pinnedPeerCertificateChainSha256": {
                    "description": "使用标准编码格式表示的远程服务器的证书链的SHA256散列值。在设置后，远程服务器的证书链的散列值必须为列表中的数值之一。(v4.38.0+)\n<!--\n此数值可以使用V2Ray自带的 v2ctl 工具的 certChainHash 工具根据服务器的证书链文件进行计算(按照管理，这个文件的名字一般叫 fullchain.pem )。如果没有中间证书（如自签发证书），证书链的散列值和证书本身的散列值相同。-->\n在连接因为此策略失败时，会展示此证书链散列。不建议使用这种方式获得证书链散列值，因为在这种情况下您没有机会验证此时服务器提供的证书是否为真实证书。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "serverName": {
                    "description": "指定服务器端证书的域名，在连接由 IP 建立时有用。当目标连接由域名指定时，比如在 Socks 入站时接收到了域名，或者由 Sniffing 功能探测出了域名，这个域名会自动用于 `serverName`，无须手动配置。",
                    "type": "string"
                },
                "verifyClientCertificate": {
                    "description": "在连接时进行客户端证书认证。在打开此选项后，客户端将需要配置客户端证书才能连接到服务器端。(4.42.0+)\n客户端证书必须由程序内配置的客户端证书颁发机构签发。系统内置证书颁发机构以及用于认证服务器端的证书颁发机构不会自动被信任。",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TcpObject": {
            "additionalProperties": {},
            "description": "`TcpObject` 对应传输配置的 `tcpSettings` 项。\n```json\n{\n  \"acceptProxyProtocol\": false,\n  \"header\": {\n      \"type\": \"none\"\n  }\n}\n```",
            "properties": {
                "acceptProxyProtocol": {
                    "description": "v4.27.1+，仅用于 inbound，是否接收 PROXY protocol，默认值为 `false`。填写 `true` 时，最底层 TCP 连接建立后，请求方必须先发送 PROXY protocol v1 或 v2，否则连接会被关闭。\n[PROXY protocol](https://www.haproxy.org/download/2.2/doc/proxy-protocol.txt) 专用于传递请求的真实来源 IP 和端口，**若你不了解它，请先忽略该项**。常见的反代软件（如 HAProxy、Nginx）都可以配置发送它，VLESS fallbacks xver 也可以发送它。",
                    "type": "boolean"
                },
                "header": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/NoneHeaderObject"
                        },
                        {
                            "$ref": "#/definitions/HttpHeaderObject"
                        }
                    ],
                    "description": "数据包头部伪装设置，默认值为 `NoneHeaderObject`。HTTP 伪装无法被其它 HTTP 服务器（如 Nginx）分流，但可以被 VLESS fallbacks path 分流。"
                }
            },
            "type": "object"
        },
        "TransportObject": {
            "additionalProperties": {},
            "description": "`TransportObject` 对应配置文件的 `transport` 项。\n```json\n{\n  \"tcpSettings\": {},\n  \"kcpSettings\": {},\n  \"wsSettings\": {},\n  \"httpSettings\": {},\n  \"quicSettings\": {},\n  \"dsSettings\": {},\n  \"grpcSettings\": {}\n}\n```",
            "properties": {
                "dsSettings": {
                    "$ref": "#/definitions/DomainSocketObject",
                    "description": "针对 Domain Socket 连接的配置。"
                },
                "grpcSettings": {
                    "$ref": "#/definitions/grpcObject",
                    "description": "针对 gRPC 连接的配置。 (v4.36.0+)"
                },
                "httpSettings": {
                    "$ref": "#/definitions/HttpObject",
                    "description": "针对 HTTP/2 连接的配置。"
                },
                "kcpSettings": {
                    "$ref": "#/definitions/KcpObject",
                    "description": "针对 mKCP 连接的配置。"
                },
                "quicSettings": {
                    "$ref": "#/definitions/QuicObject",
                    "description": "针对 QUIC 连接的配置。"
                },
                "tcpSettings": {
                    "$ref": "#/definitions/TcpObject",
                    "description": "针对 TCP 连接的配置。"
                },
                "wsSettings": {
                    "$ref": "#/definitions/WebSocketObject",
                    "description": "针对 WebSocket 连接的配置。"
                }
            },
            "type": "object"
        },
        "UserObject": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"user\": \"test user\",\n  \"pass\": \"test pass\",\n  \"level\": 0\n}\n```",
            "properties": {
                "level": {
                    "description": "用户等级",
                    "type": "number"
                },
                "pass": {
                    "description": "密码",
                    "type": "string"
                },
                "user": {
                    "description": "用户名",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserObject_1": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"id\": \"27848739-7e62-4138-9fd3-098a63964b6b\",\n  \"encryption\": \"none\",\n  \"level\": 0\n}\n```",
            "properties": {
                "encryption": {
                    "description": "现阶段需要填 `\"none\"`，不能留空。该要求是为了提醒使用者没有加密，也为了以后出加密方式时，防止使用者填错属性名或填错位置导致裸奔。\n若未正确设置 encryption 的值，使用 v2ray 或 -test 时会收到错误信息。",
                    "enum": [
                        "none"
                    ],
                    "type": "string"
                },
                "id": {
                    "description": "VLESS 的用户 ID，必须是一个合法的 UUID，你可以用 [在线工具](../../awesome/tools.md#%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7) 生成它。",
                    "type": "string"
                },
                "level": {
                    "description": "用户等级，详见 [本地策略](../policy.md)。",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "UserObject_2": {
            "additionalProperties": {},
            "description": "```json\n{\n  \"id\": \"27848739-7e62-4138-9fd3-098a63964b6b\",\n  \"alterId\": 0,\n  \"security\": \"auto\",\n  \"level\": 0\n}\n```",
            "properties": {
                "alterId": {
                    "description": "为了进一步防止被探测，一个用户可以在主 ID 的基础上，再额外生成多个 ID。这里只需要指定额外的 ID 的数量，推荐值为 0 代表启用 VMessAEAD。不指定的话，默认值是 `0`。最大值 `65535`。这个值不能超过服务器端所指定的值。\n:::tip\n客户端可通过设置环境变量 `V2RAY_VMESS_AEAD_DISABLED=true` 强行禁用 VMessAEAD （不推荐，仅用于兼容服务端版本在 v4.28.1 前**且**设置了 `alterId=0` ）\n:::",
                    "type": "number"
                },
                "experiments": {
                    "description": "启用的 VMess 协议实验性功能。（此处的功能为不稳定功能， 可能随时被移除）多个启用的实验之间可以用 | 字符分割，如 `\"AuthenticatedLength|NoTerminationSignal\"` 。\n`\"AuthenticatedLength\"` 启用认证的数据包长度实验。此实验需要同时在客户端与服务器端同时开启，并运行相同版本的程序。 (v4.41.0+)\n`\"NoTerminationSignal\"` 启用不发送断开连接标致实验。此实验可能会影响被代理的连接的稳定性。 (v4.41.0+)",
                    "type": "string"
                },
                "id": {
                    "description": "VMess 用户的主 ID。必须是一个合法的 UUID。",
                    "type": "string"
                },
                "level": {
                    "description": "用户等级",
                    "type": "number"
                },
                "security": {
                    "description": "加密方式，客户端将使用配置的加密方式发送数据，服务器端自动识别，无需配置。\n`\"aes-128-gcm\"`：推荐在 PC 上使用\n`\"chacha20-poly1305\"`：推荐在手机端使用\n`\"auto\"`：默认值，自动选择（运行框架为 AMD64、ARM64 或 s390x 时为 aes-128-gcm 加密方式，其他情况则为 Chacha20-Poly1305 加密方式）\n`\"none\"`：不加密\n`\"zero\"`：不加密，也不进行消息认证 (v4.35.0+)\n:::tip\n推荐使用`\"auto\"`加密方式，这样可以永久保证安全性和兼容性。\n`\"none\"` 伪加密方式会计算并验证数据包的校验数据，由于认证算法没有硬件支持，在部分平台可能速度比有硬件加速的 `\"aes-128-gcm\"` 还慢。\n`\"zero\"` 伪加密方式不会加密消息也不会计算数据的校验数据，因此理论上速度会高于其他任何加密方式。实际速度可能受到其他因素影响。\n不推荐在未开启 TLS 加密并强制校验证书的情况下使用 `\"none\"` `\"zero\"` 伪加密方式。\n如果使用 CDN 或其他会解密 TLS 的中转平台或网络环境建立连接，不建议使用 `\"none\"` `\"zero\"` 伪加密方式。\n无论使用哪种加密方式， VMess 的包头都会受到加密和认证的保护。\n:::",
                    "enum": [
                        "aes-128-gcm",
                        "auto",
                        "chacha20-poly1305",
                        "none",
                        "zero"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "WebSocketObject": {
            "additionalProperties": {},
            "description": "`WebSocketObject` 对应传输配置的 `wsSettings` 项。\n```json\n{\n  \"acceptProxyProtocol\": false,\n  \"path\": \"/\",\n  \"headers\": {\n      \"Host\": \"v2ray.com\"\n  },\n  \"maxEarlyData\": 1024,\n  \"useBrowserForwarding\": false,\n  \"earlyDataHeaderName\":\"\"\n}\n```",
            "properties": {
                "acceptProxyProtocol": {
                    "description": "v4.27.1+，仅用于 inbound，是否接收 PROXY protocol，默认值为 `false`。填写 `true` 时，最底层 TCP 连接建立后，请求方必须先发送 PROXY protocol v1 或 v2，否则连接会被关闭。\n[PROXY protocol](https://www.haproxy.org/download/2.2/doc/proxy-protocol.txt) 专用于传递请求的真实来源 IP 和端口，**若你不了解它，请先忽略该项**。常见的反代软件（如 HAProxy、Nginx）都可以配置发送它，VLESS fallbacks xver 也可以发送它。\nWebSocket 所使用的 HTTP 协议路径，默认值为 `\"/\"`。",
                    "type": "boolean"
                },
                "earlyDataHeaderName": {
                    "description": "发送的前置数据的 HTTP 头的名字，设置后启用基于 HTTP 头的前置数据。如果留空则使用基于路径的前置数据。(v4.39.0+)\n当且仅当 HTTP 头的名字为 \"Sec-WebSocket-Protocol\" 时可以启用基于 HTTP 头的前置数据浏览器转发功能。\n:::tip\nV2Ray 的 WebSocket 前置数据实现已经完成与其他项目的兼容，正确设置后可以连接其他实现的服务器端。\n其他项目的客户端可能无法连接 V2Ray 服务器端。\n:::",
                    "type": "string"
                },
                "headers": {
                    "$ref": "#/definitions/Record<string,string>",
                    "description": "自定义 HTTP 头，一个键值对，每个键表示一个 HTTP 头的名称，对应的值是字符串。默认值为空。"
                },
                "maxEarlyData": {
                    "description": "所要发送的前置数据的最长长度。用于减少连接建立的时间。(v4.37.0+)\n数据会以 Base64 RawURLEncoding 的形式附加在 path 之后，转发时需要根据前缀进行匹配。\n如果设置 `earlyDataHeaderName` 则会将前置数据放置于该 HTTP 头。(v4.39.0+)\n对于接收端，设置为任何非 0 数值都代表启用前置数据支持。",
                    "type": "number"
                },
                "useBrowserForwarding": {
                    "description": "是否启用浏览器转发。如果启用浏览器转发，相应的 WebSockets 连接就会经过浏览器转发模块进行转发后再发送至互联网。(v4.37.0+)\nv4.37.0+ 服务器端程序会自动适配客户端的浏览器转发功能，无需额外设置。\n只兼容基于基于路径的前置数据或者 HTTP 头的名字为 \"Sec-WebSocket-Protocol\" 的启用基于 HTTP 头的前置数据。\n相关配置请参考浏览器转发模块文档。[BrowserForwarderObject](../browserforwarder.md)",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "grpcObject": {
            "additionalProperties": {},
            "description": "```json\n{\n\"serviceName\": \"GunService\"\n}\n```",
            "properties": {
                "serviceName": {
                    "description": "gRPC 服务的名称。其作用类似 `path` 的功能，用于防止探测是否部署了本传输协议。建议使用复杂的随机字符串。\n根据 [gRPC 规范官方](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#appendix-a---grpc-for-protobuf) 规定，此字段不建议使用除英文大小写字母、数字、下划线及英文句号之外的字符组成。\n:::tip\n如需使用 Nginx、Caddy 等软件进行分流，设置的分流路径应为 `/${serviceName}/Tun`。\n:::",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "t<InboundConfigurationObject,\"dokodemo-door\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/InboundConfigurationObject_1"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "dokodemo-door"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<InboundConfigurationObject,\"http\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/InboundConfigurationObject_2"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "http"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<InboundConfigurationObject,\"shadowsocks\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/InboundConfigurationObject_3"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "shadowsocks"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<InboundConfigurationObject,\"socks\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/InboundConfigurationObject_4"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "socks"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<InboundConfigurationObject,\"trojan\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/InboundConfigurationObject_5"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "trojan"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<InboundConfigurationObject,\"vless\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/InboundConfigurationObject_6"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "vless"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<InboundConfigurationObject,\"vmess\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/InboundConfigurationObject_7"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "vmess"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<OutboundConfigurationObject,\"blackhole\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/OutboundConfigurationObject_1"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "blackhole"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<OutboundConfigurationObject,\"dns\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/OutboundConfigurationObject_2"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "dns"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<OutboundConfigurationObject,\"freedom\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/OutboundConfigurationObject_3"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "freedom"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<OutboundConfigurationObject,\"http\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/OutboundConfigurationObject_4"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "http"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<OutboundConfigurationObject,\"loopback\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/OutboundConfigurationObject_5"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "loopback"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<OutboundConfigurationObject,\"shadowsocks\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/OutboundConfigurationObject_6"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "shadowsocks"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<OutboundConfigurationObject,\"socks\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/OutboundConfigurationObject_7"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "socks"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<OutboundConfigurationObject,\"trojan\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/OutboundConfigurationObject_8"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "trojan"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<OutboundConfigurationObject,\"vless\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/OutboundConfigurationObject_9"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "vless"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "t<OutboundConfigurationObject,\"vmess\">": {
            "allOf": [
                {
                    "$ref": "#/definitions/OutboundConfigurationObject_10"
                },
                {
                    "properties": {
                        "_t": {
                            "enum": [
                                "vmess"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        }
    },
    "description": "V2Ray 的配置文件形式如下，客户端和服务器通用一种形式，只是实际的配置不一样。\n如果你刚接触 V2Ray，应当从了解 Inbounds 和 Outbounds 开始，只填必须的选项即可启动程序。接下来循序渐进了解其它组件，你会发现 V2Ray 并不难掌握。\n```json\n{\n  \"log\": {},\n  \"api\": {},\n  \"dns\": {},\n  \"routing\": {},\n  \"policy\": {},\n  \"inbounds\": [],\n  \"outbounds\": [],\n  \"transport\": {},\n  \"stats\": {},\n  \"reverse\": {},\n  \"fakedns\": [],\n  \"browserForwarder\": {},\n  \"observatory\": {}\n}\n```",
    "properties": {
        "api": {
            "$ref": "#/definitions/ApiObject",
            "description": "远程控制。"
        },
        "browserForwarder": {
            "$ref": "#/definitions/BrowserForwarderObject",
            "description": "浏览器转发模块。"
        },
        "dns": {
            "$ref": "#/definitions/DnsObject",
            "description": "内置的 DNS 服务器，若此项不存在，则默认使用本机的 DNS 设置。"
        },
        "fakedns": {
            "description": "虚拟 DNS 服务器。",
            "items": {
                "$ref": "#/definitions/FakeDnsObject"
            },
            "type": "array"
        },
        "inbounds": {
            "description": "一个数组，每个元素是一个入站连接配置。",
            "items": {
                "$ref": "#/definitions/InboundObject"
            },
            "type": "array"
        },
        "log": {
            "$ref": "#/definitions/LogObject",
            "description": "日志配置，表示 V2Ray 如何输出日志。"
        },
        "observatory": {
            "$ref": "#/definitions/ObservatoryObject",
            "description": "连接观测模块。"
        },
        "outbounds": {
            "description": "一个数组，每个元素是一个出站连接配置。列表中的第一个元素作为主出站协议。当路由匹配不存在或没有匹配成功时，流量由主出站协议发出。",
            "items": {
                "$ref": "#/definitions/OutboundObject"
            },
            "type": "array"
        },
        "policy": {
            "$ref": "#/definitions/PolicyObject",
            "description": "本地策略，可进行一些权限相关的配置。"
        },
        "reverse": {
            "$ref": "#/definitions/ReverseObject",
            "description": "反向代理。"
        },
        "routing": {
            "$ref": "#/definitions/RoutingObject",
            "description": "路由功能。"
        },
        "stats": {
            "$ref": "#/definitions/StatsObject",
            "description": "统计信息。"
        },
        "transport": {
            "$ref": "#/definitions/TransportObject",
            "description": "用于配置 V2Ray 如何与其它服务器建立和使用网络连接。"
        }
    },
    "type": "object"
}

